/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

	import {Errores } from '../../out/out.js'
  	import Print from '../instruction/print.js'
	import Primitive from "../expression/primitives.js"
	import {Type_dxnry} from "../abstrac/Return.js"
  	import {Declarate, Declarate_def, Set, Select} from "../instruction/Declarate.js"
  	import {var_list} from "../instruction/Declarate.js"
  	import Aritmertic from "../expression/Aritmetic.js"
	import Relational from "../expression/Relational.js"
	import Logics from "../expression/Logics.js"
	import ddl_Create_Table from '../instruction/DDl/ddl_Create_Table.js'
	import ddl_Add from '../instruction/DDl/ddl_Add.js'
	import { ddl_Drop_Column, ddl_Drop_Table } from '../instruction/DDl/ddl_Drop.js'
	import ddl_Rename_table from '../instruction/DDl/ddl_Rename_table.js'
	import ddl_Rename_Column from '../instruction/DDl/ddl_Rename_column.js'
	import dml_Insert from '../instruction/DML/dml_Insert.js'
	import { dml_Select, dml_Select_where } from '../instruction/DML/dml_Select.js'
	import dml_Update from '../instruction/DML/dml_update.js'
	import dml_Truncate from '../instruction/DML/dml_Truncate.js'
	import dml_Delete from '../instruction/DML/dml_Delete.js'
	import Cast from '../expression/Cast.js'
	import Statement from '../instruction/Statement.js'
	import If from '../instruction/If.js'
	import Variable from '../expression/Variable.js'
	import Case from '../instruction/Case.js'
  	import Group from '../expression/Group.js'
    import While from '../instruction/While.js'
    import For from '../instruction/For.js'
    import Ffunction from '../instruction/Ffunction.js'
    import Param from '../expression/Param.js'
    import ReturnExpression from '../expression/ReturnExp.js'
    import CallFunction from '../instruction/CallFunction.js'
	import Procedure from '../instruction/Procedure.js'
    import CallProcedure from '../instruction/CallProcedure.js'
	import ToLower from '../expression/Lower.js'
    import TOUpper from '../expression/Upper.js'
    import Round from '../expression/Round.js'
    import Lenght from '../expression/Lenght.js'
    import Truncate from '../expression/Truncate.js'
    import TypeOf from '../expression/TypeOf.js'


import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,10],$V1=[1,16],$V2=[1,19],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,38],$Va=[1,40],$Vb=[1,41],$Vc=[1,42],$Vd=[1,43],$Ve=[1,44],$Vf=[1,45],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,39],$Vl=[5,13,15,22,25,26,27,29,30,37,39,44,50,52,61,70,72,73,88,90,91,95,96,105],$Vm=[1,60],$Vn=[1,61],$Vo=[1,59],$Vp=[1,76],$Vq=[1,71],$Vr=[1,70],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[1,78],$VA=[1,72],$VB=[1,73],$VC=[1,74],$VD=[1,75],$VE=[1,77],$VF=[1,89],$VG=[1,110],$VH=[1,107],$VI=[1,116],$VJ=[1,117],$VK=[1,111],$VL=[1,112],$VM=[1,113],$VN=[1,114],$VO=[1,115],$VP=[1,105],$VQ=[1,106],$VR=[1,108],$VS=[1,109],$VT=[13,15,16,36,38,49,66,67,68,74,75,79,80,81,82,83,84,85,86,87,89,90,93,94],$VU=[13,15,16,36,38,49,66,67,68,74,75,76,79,80,81,82,83,84,85,86,87,89,90,93,94],$VV=[1,138],$VW=[1,133],$VX=[1,134],$VY=[1,135],$VZ=[1,136],$V_=[1,137],$V$=[2,83],$V01=[1,141],$V11=[1,143],$V21=[1,148],$V31=[36,49],$V41=[2,94],$V51=[13,15,16,36,49,66,68,74,75,89,90,93,94],$V61=[16,36],$V71=[13,16,34,36,49,93],$V81=[2,48],$V91=[2,99],$Va1=[1,206],$Vb1=[13,15,16,36,38,49,66,68,74,75,79,80,81,82,83,84,85,89,90,93,94],$Vc1=[13,15,16,36,38,49,66,68,74,75,79,80,81,82,83,89,90,93,94],$Vd1=[1,219],$Ve1=[36,49,66],$Vf1=[1,248],$Vg1=[1,265],$Vh1=[1,264],$Vi1=[90,94],$Vj1=[36,49,93],$Vk1=[1,298],$Vl1=[1,299],$Vm1=[1,300],$Vn1=[16,49,74,75,76],$Vo1=[36,68],$Vp1=[1,337],$Vq1=[1,359],$Vr1=[1,355],$Vs1=[1,356],$Vt1=[1,357],$Vu1=[1,358],$Vv1=[16,49,67,74,75,76,84,85,86,87],$Vw1=[16,49,74,75,76,84,85];

export class QueryParserParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new QueryParserLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print":7,"declare":8,"set":9,"select":10,"ddl":11,"dml":12,"RBEGIN":13,"newStatement":14,"REND":15,"PUNTOCOMA":16,"if":17,"case":18,"while":19,"for":20,"function":21,"call_function":22,"procedure":23,"call_procedure":24,"RBREAK":25,"RCONTINUE":26,"RRETURN":27,"expresion":28,"RPRINT":29,"RDECLARE":30,"variable_l":31,"VARIABLE_NAME":32,"data_type":33,"RDEFAULT":34,"primitivo":35,"COMMA":36,"RSET":37,"EQUAL":38,"RSELECT":39,"a_s":40,"create":41,"alter":42,"drop":43,"RCREATE":44,"RTABLE":45,"ID":46,"PARENIZQ":47,"column_list":48,"PARENDER":49,"RALTER":50,"RADD":51,"RDROP":52,"RCOLUMN":53,"RRENAME":54,"RTO":55,"dml_insert":56,"dml_select":57,"dml_update":58,"dml_truncate":59,"dml_delete":60,"RINSERT":61,"RINTO":62,"id_list":63,"RVALUES":64,"values_list":65,"RFROM":66,"BY":67,"RWHERE":68,"where_conds":69,"RUPDATE":70,"set_columns":71,"RTRUNCATE":72,"RDELETE":73,"AND":74,"OR":75,"NOT":76,"condition":77,"arit_cond":78,"DIFERENT":79,"MINOR":80,"MINOREQUAL":81,"GREATER":82,"GREATEREQUAL":83,"PLUS":84,"LESS":85,"DIVIDED":86,"MODUL":87,"RIF":88,"RTHEN":89,"RELSE":90,"RCASE":91,"case_list":92,"RAS":93,"RWHEN":94,"RWHILE":95,"RFOR":96,"RIN":97,"ENTERO":98,"RANGO":99,"RFUNCTION":100,"params":101,"RRETURNS":102,"args":103,"RPROCEDURE":104,"RCALL":105,"aritmetica":106,"relacional":107,"logica":108,"natives":109,"cast":110,"DECIMAL":111,"DATE":112,"CADENA":113,"RTRUE":114,"RFALSE":115,"RNULL":116,"RCAST":117,"RLOWER":118,"RUPPER":119,"RROUND":120,"RLENGTH":121,"RTYPEOF":122,"RINT":123,"RDOUBLE":124,"RDATE":125,"RVARCHAR":126,"RBOOLEAN":127,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",13:"RBEGIN",15:"REND",16:"PUNTOCOMA",22:"call_function",25:"RBREAK",26:"RCONTINUE",27:"RRETURN",29:"RPRINT",30:"RDECLARE",32:"VARIABLE_NAME",34:"RDEFAULT",36:"COMMA",37:"RSET",38:"EQUAL",39:"RSELECT",44:"RCREATE",45:"RTABLE",46:"ID",47:"PARENIZQ",49:"PARENDER",50:"RALTER",51:"RADD",52:"RDROP",53:"RCOLUMN",54:"RRENAME",55:"RTO",61:"RINSERT",62:"RINTO",64:"RVALUES",66:"RFROM",67:"BY",68:"RWHERE",70:"RUPDATE",72:"RTRUNCATE",73:"RDELETE",74:"AND",75:"OR",76:"NOT",79:"DIFERENT",80:"MINOR",81:"MINOREQUAL",82:"GREATER",83:"GREATEREQUAL",84:"PLUS",85:"LESS",86:"DIVIDED",87:"MODUL",88:"RIF",89:"RTHEN",90:"RELSE",91:"RCASE",93:"RAS",94:"RWHEN",95:"RWHILE",96:"RFOR",97:"RIN",98:"ENTERO",99:"RANGO",100:"RFUNCTION",102:"RRETURNS",104:"RPROCEDURE",105:"RCALL",111:"DECIMAL",112:"DATE",113:"CADENA",114:"RTRUE",115:"RFALSE",116:"RNULL",117:"RCAST",118:"RLOWER",119:"RUPPER",120:"RROUND",121:"RLENGTH",122:"RTYPEOF",123:"RINT",124:"RDOUBLE",125:"RDATE",126:"RVARCHAR",127:"RBOOLEAN"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[7,3],[8,3],[8,6],[31,4],[31,2],[9,5],[10,4],[11,1],[11,1],[11,1],[41,7],[48,4],[48,2],[42,7],[42,7],[42,7],[42,9],[43,4],[12,1],[12,1],[12,1],[12,1],[12,1],[56,11],[63,4],[63,2],[65,3],[65,1],[57,5],[57,5],[57,7],[57,7],[58,7],[71,3],[71,5],[59,4],[60,6],[69,3],[69,3],[69,3],[69,1],[69,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[78,3],[78,3],[78,3],[78,3],[78,2],[78,3],[78,1],[17,7],[17,9],[18,8],[18,7],[40,2],[40,0],[92,5],[92,4],[14,1],[19,6],[20,10],[20,10],[21,12],[21,12],[103,3],[103,1],[103,0],[23,9],[24,6],[101,4],[101,2],[101,0],[28,1],[28,1],[28,1],[28,1],[28,1],[28,3],[28,1],[28,1],[28,4],[28,1],[106,3],[106,3],[106,3],[106,3],[106,3],[106,2],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[108,3],[108,3],[108,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[110,6],[109,4],[109,4],[109,6],[109,4],[109,4],[109,6],[109,4],[109,4],[33,1],[33,1],[33,1],[33,1],[33,1],[33,2]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,17:11,18:12,19:13,20:14,21:15,22:$V1,23:17,24:18,25:$V2,26:$V3,27:$V4,29:$V5,30:$V6,37:$V7,39:$V8,41:26,42:27,43:28,44:$V9,50:$Va,52:$Vb,56:29,57:30,58:31,59:32,60:33,61:$Vc,70:$Vd,72:$Ve,73:$Vf,88:$Vg,91:$Vh,95:$Vi,96:$Vj,105:$Vk},{1:[3]},{5:[1,46],6:47,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,17:11,18:12,19:13,20:14,21:15,22:$V1,23:17,24:18,25:$V2,26:$V3,27:$V4,29:$V5,30:$V6,37:$V7,39:$V8,41:26,42:27,43:28,44:$V9,50:$Va,52:$Vb,56:29,57:30,58:31,59:32,60:33,61:$Vc,70:$Vd,72:$Ve,73:$Vf,88:$Vg,91:$Vh,95:$Vi,96:$Vj,105:$Vk},o($Vl,[2,3]),o($Vl,[2,4]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),{4:49,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:48,17:11,18:12,19:13,20:14,21:15,22:$V1,23:17,24:18,25:$V2,26:$V3,27:$V4,29:$V5,30:$V6,37:$V7,39:$V8,41:26,42:27,43:28,44:$V9,50:$Va,52:$Vb,56:29,57:30,58:31,59:32,60:33,61:$Vc,70:$Vd,72:$Ve,73:$Vf,88:$Vg,91:$Vh,95:$Vi,96:$Vj,105:$Vk},o($Vl,[2,11]),o($Vl,[2,12]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),{16:[1,50]},{16:[1,51]},{16:[1,52],28:53,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:79,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{31:80,32:[1,81]},{32:[1,82]},{28:83,32:$Vm,35:54,46:$Vn,47:$Vo,63:84,67:[1,85],72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($Vl,[2,30]),o($Vl,[2,31]),o($Vl,[2,32]),o($Vl,[2,41]),o($Vl,[2,42]),o($Vl,[2,43]),o($Vl,[2,44]),o($Vl,[2,45]),{28:86,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:87,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,92:88,94:$VF,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:90,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{32:[1,92],46:[1,91]},{45:[1,95],100:[1,93],104:[1,94]},{46:[1,96]},{45:[1,97]},{45:[1,98]},{62:[1,99]},{46:[1,100]},{45:[1,101]},{66:[1,102]},{1:[2,1]},o($Vl,[2,2]),{15:[1,103]},o([15,90],[2,86],{7:4,8:5,9:6,10:7,11:8,12:9,17:11,18:12,19:13,20:14,21:15,23:17,24:18,41:26,42:27,43:28,56:29,57:30,58:31,59:32,60:33,6:47,13:$V0,22:$V1,25:$V2,26:$V3,27:$V4,29:$V5,30:$V6,37:$V7,39:$V8,44:$V9,50:$Va,52:$Vb,61:$Vc,70:$Vd,72:$Ve,73:$Vf,88:$Vg,91:$Vh,95:$Vi,96:$Vj,105:$Vk}),o($Vl,[2,19]),o($Vl,[2,20]),o($Vl,[2,21]),{16:[1,104],38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},o($VT,[2,100]),o($VT,[2,101]),o($VT,[2,102]),o($VT,[2,103]),o($VT,[2,104]),{28:118,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($VT,[2,106]),o($VT,[2,107],{47:[1,119]}),o($VT,[2,109]),o($VU,[2,125]),o($VU,[2,126]),o($VU,[2,127]),o($VU,[2,128]),o($VU,[2,129]),o($VU,[2,130]),o($VU,[2,131]),{28:120,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:121,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{47:[1,122]},{47:[1,123]},{47:[1,124]},{47:[1,125]},{47:[1,126]},{47:[1,127]},{47:[1,128]},{16:[1,129],38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},{16:[1,130],36:[1,131]},{2:$VV,33:132,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{38:[1,139]},o([16,36,66],$V$,{40:140,38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,93:$V01}),{36:$V11,66:[1,142]},{66:[1,144]},{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:[1,145]},{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,92:146,94:$VF},{90:[1,147],94:$V21},{28:149,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{13:[1,150],38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},{97:[1,151]},{97:[1,152]},{46:[1,153]},{46:[1,154]},{46:[1,155]},{47:[1,156]},{46:[1,157]},{46:[1,158]},{46:[1,159]},{37:[1,160]},{46:[1,161]},{46:[1,162]},{16:[1,163]},o($Vl,[2,22]),{28:164,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:165,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:166,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:167,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:168,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:169,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:170,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:171,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:172,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:173,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:174,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:175,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:176,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{38:$VG,49:[1,177],67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},o($V31,$V41,{35:54,106:55,107:56,108:57,109:58,110:62,103:178,28:179,32:$Vm,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE}),o($VT,[2,115]),o($V51,[2,124],{38:$VG,67:$VH,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),{28:180,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:181,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:182,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:183,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:184,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:185,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:186,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($Vl,[2,23]),o($Vl,[2,24]),{32:[1,187]},o($V61,[2,27],{34:[1,188]}),o($V71,[2,141]),o($V71,[2,142]),o($V71,[2,143]),o($V71,[2,144]),o($V71,[2,145]),{16:[1,189]},{28:190,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o([36,66],$V81,{16:[1,191]}),{28:192,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{46:[1,193]},{28:194,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{46:[1,195]},{4:49,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:196,17:11,18:12,19:13,20:14,21:15,22:$V1,23:17,24:18,25:$V2,26:$V3,27:$V4,29:$V5,30:$V6,37:$V7,39:$V8,41:26,42:27,43:28,44:$V9,50:$Va,52:$Vb,56:29,57:30,58:31,59:32,60:33,61:$Vc,70:$Vd,72:$Ve,73:$Vf,88:$Vg,91:$Vh,95:$Vi,96:$Vj,105:$Vk},{90:[1,197],94:$V21},{28:198,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:199,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:[1,200]},{4:49,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:201,17:11,18:12,19:13,20:14,21:15,22:$V1,23:17,24:18,25:$V2,26:$V3,27:$V4,29:$V5,30:$V6,37:$V7,39:$V8,41:26,42:27,43:28,44:$V9,50:$Va,52:$Vb,56:29,57:30,58:31,59:32,60:33,61:$Vc,70:$Vd,72:$Ve,73:$Vf,88:$Vg,91:$Vh,95:$Vi,96:$Vj,105:$Vk},{98:[1,202]},{98:[1,203]},{47:[1,204]},o([36,93],$V91,{101:205,32:$Va1}),{47:[1,207]},o($V31,$V41,{35:54,106:55,107:56,108:57,109:58,110:62,28:179,103:208,32:$Vm,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE}),{51:[1,209],52:[1,210],54:[1,211]},{16:[1,212]},{47:[1,213]},{46:[1,215],71:214},{16:[1,216]},{68:[1,217]},o($Vl,[2,10]),o($Vb1,[2,110],{67:$VH,86:$VR,87:$VS}),o($Vb1,[2,111],{67:$VH,86:$VR,87:$VS}),o($VT,[2,112]),o($VT,[2,113]),o($VT,[2,114]),o($Vc1,[2,116],{67:$VH,84:$VP,85:$VQ,86:$VR,87:$VS}),o($Vc1,[2,117],{67:$VH,84:$VP,85:$VQ,86:$VR,87:$VS}),o($Vc1,[2,118],{67:$VH,84:$VP,85:$VQ,86:$VR,87:$VS}),o($Vc1,[2,119],{67:$VH,84:$VP,85:$VQ,86:$VR,87:$VS}),o($Vc1,[2,120],{67:$VH,84:$VP,85:$VQ,86:$VR,87:$VS}),o($Vc1,[2,121],{67:$VH,84:$VP,85:$VQ,86:$VR,87:$VS}),o($V51,[2,122],{38:$VG,67:$VH,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),o([13,15,16,36,49,66,68,75,89,90,93,94],[2,123],{38:$VG,67:$VH,74:$VI,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),o($VT,[2,105]),{36:$Vd1,49:[1,218]},o($V31,[2,93],{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),{38:$VG,49:[1,220],67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},{38:$VG,49:[1,221],67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},{36:[1,222],38:$VG,49:[1,223],67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},{38:$VG,49:[1,224],67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},{36:[1,225],38:$VG,49:[1,226],67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},{38:$VG,49:[1,227],67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,93:[1,228]},{2:$VV,33:229,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{35:230,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},o($V71,[2,146]),{16:[1,231],38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},o($Vl,[2,29]),o([16,36,49,66],[2,82],{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),{16:[1,232],68:[1,233]},o($Ve1,$V$,{40:234,38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,93:$V01}),{16:[1,235],68:[1,236]},{15:[1,237],90:[1,238]},{28:239,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{15:[1,240],38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:[1,241]},{28:242,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{15:[1,243]},{99:[1,244]},{99:[1,245]},o($V31,$V91,{101:246,32:$Va1}),{36:$Vf1,93:[1,247]},{2:$VV,33:249,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{46:[1,251],48:250},{36:$Vd1,49:[1,252]},{46:[1,253]},{53:[1,254]},{53:[1,256],55:[1,255]},o($Vl,[2,40]),{28:258,32:$Vm,35:54,46:$Vn,47:$Vo,63:257,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{36:[1,260],68:[1,259]},{38:[1,261]},o($Vl,[2,58]),{46:$Vg1,47:$Vh1,69:262,77:263},o($VT,[2,108]),{28:266,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($VT,[2,133]),o($VT,[2,134]),{98:[1,267]},o($VT,[2,136]),o($VT,[2,137]),{98:[1,268]},o($VT,[2,139]),o($VT,[2,140]),{2:$VV,33:269,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},o($V61,[2,26]),{16:[1,270]},o($Vl,[2,28]),o($Vl,[2,51]),{46:$Vg1,47:$Vh1,69:271,77:263},o($Ve1,[2,47]),o($Vl,[2,52]),{46:$Vg1,47:$Vh1,69:272,77:263},{88:[1,273]},{4:49,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:274,17:11,18:12,19:13,20:14,21:15,22:$V1,23:17,24:18,25:$V2,26:$V3,27:$V4,29:$V5,30:$V6,37:$V7,39:$V8,41:26,42:27,43:28,44:$V9,50:$Va,52:$Vb,56:29,57:30,58:31,59:32,60:33,61:$Vc,70:$Vd,72:$Ve,73:$Vf,88:$Vg,91:$Vh,95:$Vi,96:$Vj,105:$Vk},{15:[1,275],38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS},{16:$V$,40:276,93:$V01},{28:277,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($Vi1,[2,85],{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),{16:[1,278]},{98:[1,279]},{98:[1,280]},{36:$Vf1,49:[1,281]},{13:[1,282]},{32:[1,283]},o($Vj1,[2,98]),{36:[1,285],49:[1,284]},{2:$VV,33:286,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{16:[1,287]},{2:$VV,33:288,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{46:[1,289]},{46:[1,290]},{46:[1,291]},{36:$V11,49:[1,292]},o($V31,$V$,{40:293,38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,93:$V01}),{46:$Vg1,47:$Vh1,69:294,77:263},{46:[1,295]},{28:296,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{16:[1,297],74:$Vk1,75:$Vl1,76:$Vm1},o($Vn1,[2,63]),{46:$Vg1,47:$Vh1,69:301,77:263},{38:[1,302],79:[1,303],80:[1,304],81:[1,305],82:[1,306],83:[1,307]},o($V31,[2,92],{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),{49:[1,308]},{49:[1,309]},{49:[1,310]},o($Vl,[2,25]),{16:[1,311],74:$Vk1,75:$Vl1,76:$Vm1},{16:[1,312],74:$Vk1,75:$Vl1,76:$Vm1},{16:[1,313]},{15:[1,314]},{16:$V$,40:315,93:$V01},{16:[1,316]},o($Vi1,[2,84],{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),o($Vl,[2,87]),{13:[1,317]},{13:[1,318]},{27:[1,319],102:[1,320]},{4:49,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:321,17:11,18:12,19:13,20:14,21:15,22:$V1,23:17,24:18,25:$V2,26:$V3,27:$V4,29:$V5,30:$V6,37:$V7,39:$V8,41:26,42:27,43:28,44:$V9,50:$Va,52:$Vb,56:29,57:30,58:31,59:32,60:33,61:$Vc,70:$Vd,72:$Ve,73:$Vf,88:$Vg,91:$Vh,95:$Vi,96:$Vj,105:$Vk},{2:$VV,33:322,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{16:[1,323]},{46:[1,324]},o($V31,[2,35]),o($Vl,[2,96]),{16:[1,325]},{16:[1,326]},{16:[1,327]},{55:[1,328]},{64:[1,329]},o($V31,$V81),{16:[1,330],74:$Vk1,75:$Vl1,76:$Vm1},{38:[1,331]},o($Vo1,[2,56],{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),o($Vl,[2,59]),{46:$Vg1,47:$Vh1,69:332,77:263},{46:$Vg1,47:$Vh1,69:333,77:263},{46:$Vg1,47:$Vh1,69:334,77:263},{49:[1,335],74:$Vk1,75:$Vl1,76:$Vm1},{35:338,78:336,85:$Vp1,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},{35:338,78:339,85:$Vp1,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},{35:338,78:340,85:$Vp1,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},{35:338,78:341,85:$Vp1,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},{35:338,78:342,85:$Vp1,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},{35:338,78:343,85:$Vp1,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},o($VT,[2,135]),o($VT,[2,138]),o($VT,[2,132]),o($Vl,[2,53]),o($Vl,[2,54]),o($Vl,[2,78]),{88:[1,344]},{16:[1,345]},o($Vl,[2,81]),{4:49,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:346,17:11,18:12,19:13,20:14,21:15,22:$V1,23:17,24:18,25:$V2,26:$V3,27:$V4,29:$V5,30:$V6,37:$V7,39:$V8,41:26,42:27,43:28,44:$V9,50:$Va,52:$Vb,56:29,57:30,58:31,59:32,60:33,61:$Vc,70:$Vd,72:$Ve,73:$Vf,88:$Vg,91:$Vh,95:$Vi,96:$Vj,105:$Vk},{4:49,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:347,17:11,18:12,19:13,20:14,21:15,22:$V1,23:17,24:18,25:$V2,26:$V3,27:$V4,29:$V5,30:$V6,37:$V7,39:$V8,41:26,42:27,43:28,44:$V9,50:$Va,52:$Vb,56:29,57:30,58:31,59:32,60:33,61:$Vc,70:$Vd,72:$Ve,73:$Vf,88:$Vg,91:$Vh,95:$Vi,96:$Vj,105:$Vk},{2:$VV,33:348,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{2:$VV,33:349,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{15:[1,350]},o($Vj1,[2,97]),o($Vl,[2,33]),{2:$VV,33:351,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},o($Vl,[2,36]),o($Vl,[2,37]),o($Vl,[2,38]),{46:[1,352]},{47:[1,353]},o($Vl,[2,55]),{28:354,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o([16,49,74,75],[2,60],{76:$Vm1}),o([16,49,75],[2,61],{74:$Vk1,76:$Vm1}),o($Vn1,[2,62]),o($Vn1,[2,64]),o($Vn1,[2,65],{67:$Vq1,84:$Vr1,85:$Vs1,86:$Vt1,87:$Vu1}),{35:338,78:360,85:$Vp1,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},o($Vv1,[2,77]),o($Vn1,[2,66],{67:$Vq1,84:$Vr1,85:$Vs1,86:$Vt1,87:$Vu1}),o($Vn1,[2,67],{67:$Vq1,84:$Vr1,85:$Vs1,86:$Vt1,87:$Vu1}),o($Vn1,[2,68],{67:$Vq1,84:$Vr1,85:$Vs1,86:$Vt1,87:$Vu1}),o($Vn1,[2,69],{67:$Vq1,84:$Vr1,85:$Vs1,86:$Vt1,87:$Vu1}),o($Vn1,[2,70],{67:$Vq1,84:$Vr1,85:$Vs1,86:$Vt1,87:$Vu1}),{16:[1,361]},o($Vl,[2,80]),{15:[1,362]},{15:[1,363]},{13:[1,364]},{13:[1,365]},{16:[1,366]},o($V31,[2,34]),{16:[1,367]},{28:369,32:$Vm,35:54,46:$Vn,47:$Vo,65:368,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($Vo1,[2,57],{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),{35:338,78:370,85:$Vp1,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},{35:338,78:371,85:$Vp1,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},{35:338,78:372,85:$Vp1,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},{35:338,78:373,85:$Vp1,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},{35:338,78:374,85:$Vp1,98:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy},o($Vv1,[2,75]),o($Vl,[2,79]),{16:[1,375]},{16:[1,376]},{4:49,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:377,17:11,18:12,19:13,20:14,21:15,22:$V1,23:17,24:18,25:$V2,26:$V3,27:$V4,29:$V5,30:$V6,37:$V7,39:$V8,41:26,42:27,43:28,44:$V9,50:$Va,52:$Vb,56:29,57:30,58:31,59:32,60:33,61:$Vc,70:$Vd,72:$Ve,73:$Vf,88:$Vg,91:$Vh,95:$Vi,96:$Vj,105:$Vk},{4:49,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:378,17:11,18:12,19:13,20:14,21:15,22:$V1,23:17,24:18,25:$V2,26:$V3,27:$V4,29:$V5,30:$V6,37:$V7,39:$V8,41:26,42:27,43:28,44:$V9,50:$Va,52:$Vb,56:29,57:30,58:31,59:32,60:33,61:$Vc,70:$Vd,72:$Ve,73:$Vf,88:$Vg,91:$Vh,95:$Vi,96:$Vj,105:$Vk},o($Vl,[2,95]),o($Vl,[2,39]),{36:[1,380],49:[1,379]},o($V31,[2,50],{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),o($Vw1,[2,71],{67:$Vq1,86:$Vt1,87:$Vu1}),o($Vw1,[2,72],{67:$Vq1,86:$Vt1,87:$Vu1}),o($Vv1,[2,73]),o($Vv1,[2,74]),o($Vv1,[2,76]),o($Vl,[2,88]),o($Vl,[2,89]),{15:[1,381]},{15:[1,382]},{16:[1,383]},{28:384,32:$Vm,35:54,46:$Vn,47:$Vo,72:$Vp,76:$Vq,85:$Vr,98:$Vs,106:55,107:56,108:57,109:58,110:62,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{16:[1,385]},{16:[1,386]},o($Vl,[2,46]),o($V31,[2,49],{38:$VG,67:$VH,74:$VI,75:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),o($Vl,[2,90]),o($Vl,[2,91])];
    defaultActions: {[key:number]: any} = {46:[2,1]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

		return $$[$0-1]
	
break;
case 2:

		$$[$0-1].push($$[$0])
		this.$ = $$[$0-1]
	
break;
case 3: case 93:

		this.$ = [$$[$0]]
	
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 30: case 31: case 32: case 41: case 42: case 43: case 44: case 45: case 63: case 77: case 82: case 100: case 101: case 102: case 103: case 104: case 107: case 109:

		this.$ = $$[$0]
	
break;
case 10:

		this.$ = $$[$0-2]
	
break;
case 19:

		this.$ = new Primitive( null, Type_dxnry.BREAK)
	
break;
case 20:

		this.$ = new Primitive( null, Type_dxnry.CONTINUE)
	
break;
case 21:
 
		this.$ = new ReturnExpression( null, Type_dxnry.RETURN); 
	
break;
case 22:
 
		this.$ = new ReturnExpression( $$[$0-1], Type_dxnry.RETURN); 
	
break;
case 23:

		this.$ = new Print( $$[$0-1])
	
break;
case 24:

		this.$ = new Declarate($$[$0-1])
	
break;
case 25:

		// DECLARE @id INT DEFAULT 1
		this.$ = new Declarate_def($$[$0-4], $$[$0-3], $$[$0-1])
	
break;
case 26:

		$$[$0-3].push(new var_list($$[$0-1], $$[$0]))
		this.$ = $$[$0-3]
	
break;
case 27:



		this.$ = [new var_list($$[$0-1], $$[$0])]
	
break;
case 28:

		this.$ = new Set($$[$0-3], $$[$0-1])
	
break;
case 29:

		this.$ = new Select($$[$0-2], $$[$0-1])
	
break;
case 33:

		this.$ = new ddl_Create_Table($$[$0-4], $$[$0-2])
	
break;
case 34:

		this.$ = $$[$0-3]
		$$[$0-3].push([$$[$0-1], $$[$0]])
	
break;
case 35:

		this.$ = []
		this.$.push([$$[$0-1], $$[$0]])
	
break;
case 36:

		this.$ = new ddl_Add($$[$0-4], $$[$0-2], $$[$0-1])
	
break;
case 37:

		this.$ = new ddl_Drop_Column($$[$0-4], $$[$0-1])
	
break;
case 38:

		this.$ = new ddl_Rename_table($$[$0-4], $$[$0-1])
	
break;
case 39:

		this.$ = new ddl_Rename_Column($$[$0-6], $$[$0-3], $$[$0-1])
	
break;
case 40:

		this.$ = new ddl_Drop_Table($$[$0-1])
	
break;
case 46:

		this.$ = new dml_Insert($$[$0-8], $$[$0-6], $$[$0-2])
	
break;
case 47:

		this.$ = $$[$0-3]
		$$[$0-3].push($$[$0-1])
	
break;
case 48:

		this.$ = []
		this.$.push($$[$0-1])
	
break;
case 49:

		this.$ = $$[$0-2]
		$$[$0-2].push($$[$0])
	
break;
case 50:

		this.$ = []
		this.$.push($$[$0])
	
break;
case 51:

		this.$ = new dml_Select($$[$0-3], $$[$0-1])
	
break;
case 52:

		this.$ = new dml_Select("*", $$[$0-1])
	
break;
case 53:

		this.$ = new dml_Select_where($$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 54:

		this.$ = new dml_Select_where("*", $$[$0-3], $$[$0-1])
	
break;
case 55:

		this.$ = new dml_Update($$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 56: case 85:

		this.$ = []
		this.$.push([$$[$0-2], $$[$0]])
	
break;
case 57: case 84:

		this.$ = $$[$0-4]
		$$[$0-4].push([$$[$0-2], $$[$0]])
	
break;
case 58:

		this.$ = new dml_Truncate($$[$0-1])
	
break;
case 59:

		this.$ = new dml_Delete($$[$0-3], $$[$0-1])
	
break;
case 60: case 61: case 62: case 122: case 123:

		this.$ = new Logics($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 64:

		this.$ = $$[$0-1]
	
break;
case 65: case 66: case 67: case 68: case 69: case 70: case 116: case 117: case 118: case 119: case 120: case 121:

		this.$ = new Relational($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 71: case 72: case 73: case 74: case 76: case 110: case 111: case 112: case 113: case 114:

		this.$ = new Aritmertic($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 75: case 115:

		this.$ = new Aritmertic($$[$0], "!", $$[$0])
	
break;
case 78:

		this.$ = new If($$[$0-5], $$[$0-3], null)
	
break;
case 79:

		this.$ = new If($$[$0-7], $$[$0-5], $$[$0-3])
	
break;
case 80:

		this.$ = new Case($$[$0-6], $$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 81:

		this.$ = new Case(null, $$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 83:

		this.$ = null
	
break;
case 86:

		this.$ = new Statement($$[$0])
	
break;
case 87:

		this.$ = new While($$[$0-4], $$[$0-2])
	
break;
case 88: case 89:

		this.$ = new For($$[$0-8], parseInt($$[$0-6]), parseInt($$[$0-4]), $$[$0-2])
	
break;
case 90: case 91:

		this.$ = new Ffunction($$[$0-9], $$[$0-7], $$[$0-4], $$[$0-2])
	
break;
case 92:

		$$[$0-2].push($$[$0])
		this.$ = $$[$0-2]
	
break;
case 94: case 99:

		this.$ = []
	
break;
case 95:

		this.$ = new Procedure($$[$0-6], $$[$0-5], $$[$0-2])
	
break;
case 96:

		this.$ = new CallProcedure($$[$0-4], $$[$0-2])
	
break;
case 97:

		$$[$0-3].push( new Param($$[$0-1], $$[$0]));
        this.$ = $$[$0-3];
	
break;
case 98:

		let param = new Param($$[$0-1], $$[$0])
		let params = [];
		params.push(param);
		this.$ = params;
	
break;
case 105:

		this.$ = new Group($$[$0-1])
	
break;
case 106:

		this.$ = new Variable($$[$0])
	
break;
case 108:

		this.$ = new CallFunction($$[$0-3], $$[$0-1])
	
break;
case 124:

		this.$ = new Logics($$[$0], $$[$0-1], $$[$0])
	
break;
case 125:

		this.$ = new Primitive( parseInt($$[$0]), Type_dxnry.INT)
	
break;
case 126:

		this.$ = new Primitive( parseFloat($$[$0]), Type_dxnry.DOUBLE)
	
break;
case 127:

		this.$ = new Primitive( $$[$0], Type_dxnry.DATE)
	
break;
case 128:

		this.$ = new Primitive( $$[$0].slice(1, -1), Type_dxnry.STRING)
	
break;
case 129: case 130:

		this.$ = new Primitive( $$[$0], Type_dxnry.BOOLEAN)
	
break;
case 131:

		this.$ = new Primitive( $$[$0], Type_dxnry.NULL)
	
break;
case 132:

		this.$ = new Cast( $$[$0-3], $$[$0-1])
	
break;
case 133:

		this.$ = new ToLower($$[$0-1])
	
break;
case 134:

		this.$ = new TOUpper($$[$0-1])
	
break;
case 135:

		this.$ = new Round($$[$0-3], new Primitive( $$[$0-1], Type_dxnry.INT))
	
break;
case 136:

		this.$ = new Round($$[$0-1], null)
	
break;
case 137:

		this.$ = new Lenght($$[$0-1])
	
break;
case 138:

		this.$ = new Truncate($$[$0-3], new Primitive( $$[$0-1], Type_dxnry.INT))
	
break;
case 139:

		this.$ = new Truncate($$[$0-1], null)
	
break;
case 140:

		this.$ = new TypeOf($$[$0-1])
	
break;
case 141:

		this.$ = Type_dxnry.INT
	
break;
case 142:

		this.$ = Type_dxnry.DOUBLE
	
break;
case 143:

		this.$ = Type_dxnry.DATE
	
break;
case 144:

		this.$ = Type_dxnry.STRING
	
break;
case 145:

		this.$ = Type_dxnry.BOOLEAN
	
break;
case 146:

		console.error('Error sintáctico: ' + yytext + ',  linea: ' + this.$.first_line + ', columna: ' + this.$.first_column)
		Errores.push('Error sintáctico: ' + yytext + ',  linea: ' + this.$.first_line + ', columna: ' + this.$.first_column)
	
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class QueryParserLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"QueryParser"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:--.*)/i,/^(?:\/\*[\s\S]*?\*\/)/i,/^(?:\*)/i,/^(?:\.\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:print\b)/i,/^(?:declare\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:default\b)/i,/^(?:end\b)/i,/^(?:set\b)/i,/^(?:select\b)/i,/^(?:create\b)/i,/^(?:table\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:cast\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:typeof\b)/i,/^(?:as\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:when\b)/i,/^(?:case\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:returns\b)/i,/^(?:procedure\b)/i,/^(?:call\b)/i,/^(?:(@[^@\s,;()*+-/%>=!]+))/i,/^(?:(\d{4}-\d{2}-\d{2}))/i,/^(?:(\d+\.\d+))/i,/^(?:([0-9]+))/i,/^(?:("(\\.|[^"\\])*"))/i,/^(?:([a-z_][a-z0-9_]*))/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0: /* Comentarios de linea */ 
      break;
    case 1: /* Comentarios multilinea */ 
      break;
    case 2: return 67
      break;
    case 3: return 99
      break;
    case 4: return 47
      break;
    case 5: return 49
      break;
    case 6: return 16
      break;
    case 7: return 36
      break;
    case 8: return 84
      break;
    case 9: return 85
      break;
    case 10: return 86
      break;
    case 11: return 87
      break;
    case 12: return 83
      break;
    case 13: return 81
      break;
    case 14: return 79
      break;
    case 15: return 38
      break;
    case 16: return 80
      break;
    case 17: return 82
      break;
    case 18: return 74
      break;
    case 19: return 75
      break;
    case 20: return 76
      break;
    case 21: return 114
      break;
    case 22: return 115
      break;
    case 23: return 116
      break;
    case 24: return 29
      break;
    case 25: return 30
      break;
    case 26: return 123
      break;
    case 27: return 124
      break;
    case 28: return 125
      break;
    case 29: return 126
      break;
    case 30: return 127
      break;
    case 31: return 34
      break;
    case 32: return 15
      break;
    case 33: return 37
      break;
    case 34: return 39
      break;
    case 35: return 44
      break;
    case 36: return 45
      break;
    case 37: return 50
      break;
    case 38: return 51
      break;
    case 39: return 52
      break;
    case 40: return 53
      break;
    case 41: return 54
      break;
    case 42: return 55
      break;
    case 43: return 61
      break;
    case 44: return 62
      break;
    case 45: return 64
      break;
    case 46: return 66
      break;
    case 47: return 68
      break;
    case 48: return 70
      break;
    case 49: return 72
      break;
    case 50: return 73
      break;
    case 51: return 117
      break;
    case 52: return 118
      break;
    case 53: return 119
      break;
    case 54: return 120
      break;
    case 55: return 121
      break;
    case 56: return 122
      break;
    case 57: return 93
      break;
    case 58: return 88
      break;
    case 59: return 89
      break;
    case 60: return 90
      break;
    case 61: return 94
      break;
    case 62: return 91
      break;
    case 63: return 13
      break;
    case 64: return 15
      break;
    case 65: return 95
      break;
    case 66: return 96
      break;
    case 67: return 97
      break;
    case 68: return 25
      break;
    case 69: return 26
      break;
    case 70: return 100
      break;
    case 71: return 27
      break;
    case 72: return 102
      break;
    case 73: return 104
      break;
    case 74: return 105
      break;
    case 75: return 32
      break;
    case 76: return 112
      break;
    case 77: return 111
      break;
    case 78: return 98
      break;
    case 79: return 113
      break;
    case 80: return 46
      break;
    case 81:/* Espacios se ignoran */
      break;
    case 82:return 5;
      break;
    case 83: console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
	 Errores.push('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);
	
      break;
        }
    }
}

