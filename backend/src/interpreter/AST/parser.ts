/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  	import Print from '../instruction/print.js'
	import Primitive from "../expression/primitives.js"
	import {Type_dxnry} from "../abstrac/Return.js"
  	import {Declarate, Declarate_def, Set, Select} from "../instruction/Declarate.js"
  	import {var_list} from "../instruction/Declarate.js"
  	import Aritmertic from "../expression/Aritmetic.js"
	import Relational from "../expression/Relational.js"
	import Logics from "../expression/Logics.js"


import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[5,11,13,20,22],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,25],$Vf=[1,37],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,38],$Vl=[1,39],$Vm=[1,40],$Vn=[1,41],$Vo=[1,42],$Vp=[1,43],$Vq=[5,11,13,20,21,22,26,27,28,29,30,31,32,33,34,35,36],$Vr=[1,49],$Vs=[1,50],$Vt=[1,51],$Vu=[1,52],$Vv=[1,53],$Vw=[5,11,13,20,22,35,36],$Vx=[5,11,13,19,20,22],$Vy=[5,11,13,17,19,20,22],$Vz=[5,11,13,20,21,22,26,27,30,31,32,33,34,35,36],$VA=[5,11,13,20,21,22,30,31,32,33,34,35,36];

export class QueryParserParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new QueryParserLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print":7,"declare":8,"set":9,"select":10,"RPRINT":11,"expresion":12,"RDECLARE":13,"variable_l":14,"VARIABLE_NAME":15,"data_type":16,"RDEFAULT":17,"primitivo":18,"COMMA":19,"RSET":20,"EQUAL":21,"RSELECT":22,"aritmetica":23,"relacional":24,"logica":25,"PLUS":26,"LESS":27,"DIVIDED":28,"MODUL":29,"DIFERENT":30,"MINOR":31,"MINOREQUAL":32,"GREATER":33,"GREATEREQUAL":34,"AND":35,"OR":36,"NOT":37,"ENTERO":38,"DECIMAL":39,"DATE":40,"CADENA":41,"RTRUE":42,"RFALSE":43,"RNULL":44,"RINT":45,"RDOUBLE":46,"RDATE":47,"RVARCHAR":48,"RBOOLEAN":49,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",11:"RPRINT",13:"RDECLARE",15:"VARIABLE_NAME",17:"RDEFAULT",19:"COMMA",20:"RSET",21:"EQUAL",22:"RSELECT",26:"PLUS",27:"LESS",28:"DIVIDED",29:"MODUL",30:"DIFERENT",31:"MINOR",32:"MINOREQUAL",33:"GREATER",34:"GREATEREQUAL",35:"AND",36:"OR",37:"NOT",38:"ENTERO",39:"DECIMAL",40:"DATE",41:"CADENA",42:"RTRUE",43:"RFALSE",44:"RNULL",45:"RINT",46:"RDOUBLE",47:"RDATE",48:"RVARCHAR",49:"RBOOLEAN"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[7,2],[8,2],[8,5],[14,4],[14,2],[9,4],[10,2],[12,1],[12,1],[12,1],[12,1],[23,3],[23,3],[23,3],[23,3],[23,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[25,3],[25,3],[25,2],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[16,1],[16,1],[16,1],[16,1],[16,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:$V0,13:$V1,20:$V2,22:$V3},{1:[3]},{5:[1,12],6:13,7:4,8:5,9:6,10:7,11:$V0,13:$V1,20:$V2,22:$V3},o($V4,[2,3]),o($V4,[2,4]),o($V4,[2,5]),o($V4,[2,6]),o($V4,[2,7]),{2:$V5,12:14,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{14:29,15:[1,30]},{15:[1,31]},{15:[1,32]},{1:[2,1]},o($V4,[2,2]),o($V4,[2,8],{21:$Vf,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:[1,44]}),o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),o($Vq,[2,18]),o($Vq,[2,33]),o($Vq,[2,34]),o($Vq,[2,35]),o($Vq,[2,36]),o($Vq,[2,37]),o($Vq,[2,38]),o($Vq,[2,39]),o($Vq,[2,40]),{2:$V5,12:45,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{2:$V5,12:46,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},o($V4,[2,9],{19:[1,47]}),{16:48,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv},{21:[1,54]},o($V4,[2,14]),{2:$V5,12:55,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{2:$V5,12:56,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{2:$V5,12:57,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{2:$V5,12:58,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{2:$V5,12:59,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{2:$V5,12:60,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{2:$V5,12:61,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{2:$V5,12:62,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{2:$V5,12:63,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{2:$V5,12:64,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{2:$V5,12:65,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},{2:$V5,12:66,18:15,23:16,24:17,25:18,27:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},o($Vq,[2,23]),o($Vw,[2,32],{21:$Vf,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo}),{15:[1,67]},o($Vx,[2,12],{17:[1,68]}),o($Vy,[2,41]),o($Vy,[2,42]),o($Vy,[2,43]),o($Vy,[2,44]),o($Vy,[2,45]),{2:$V5,18:69,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},o($Vz,[2,19],{28:$Vi,29:$Vj}),o($Vz,[2,20],{28:$Vi,29:$Vj}),o($Vq,[2,21]),o($Vq,[2,22]),o($VA,[2,24],{26:$Vg,27:$Vh,28:$Vi,29:$Vj}),o($VA,[2,25],{26:$Vg,27:$Vh,28:$Vi,29:$Vj}),o($VA,[2,26],{26:$Vg,27:$Vh,28:$Vi,29:$Vj}),o($VA,[2,27],{26:$Vg,27:$Vh,28:$Vi,29:$Vj}),o($VA,[2,28],{26:$Vg,27:$Vh,28:$Vi,29:$Vj}),o($VA,[2,29],{26:$Vg,27:$Vh,28:$Vi,29:$Vj}),o($Vw,[2,30],{21:$Vf,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo}),o([5,11,13,20,22,36],[2,31],{21:$Vf,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp}),{16:70,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv},{2:$V5,18:71,38:$V8,39:$V9,40:$Va,41:$Vb,42:$Vc,43:$Vd,44:$Ve},o($V4,[2,13]),o($Vx,[2,11]),o($V4,[2,10])];
    defaultActions: {[key:number]: any} = {12:[2,1]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

		return $$[$0-1]
	
break;
case 2:

		$$[$0-1].push($$[$0])
		this.$ = $$[$0-1]
	
break;
case 3:

		this.$ = [$$[$0]]
	
break;
case 4: case 5: case 6: case 7: case 15: case 16: case 17: case 18:

		this.$ = $$[$0]
	
break;
case 8:

		this.$ = new Print(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0])
	
break;
case 9:

		this.$ = new Declarate($$[$0], _$[$0-1].first_line, _$[$0-1].first_column)
	
break;
case 10:

		// DECLARE @id INT DEFAULT 1
		let id_tmp3 = $$[$0-3].toString().replace("@","")
		this.$ = new Declarate_def(id_tmp3, $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column)
	
break;
case 11:

		let id_tmp1 = $$[$0-1].toString().replace("@","")
		$$[$0-3].push(new var_list(id_tmp1, $$[$0]))
		this.$ = $$[$0-3]
	
break;
case 12:

		let id_tmp2 = $$[$0-1].toString().replace("@","")

		this.$ = [new var_list(id_tmp2, $$[$0])]
	
break;
case 13:

		let id_tmp4 = $$[$0-2].toString().replace("@","")
		this.$ = new Set(id_tmp4, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
	
break;
case 14:

		let id_tmp5 = $$[$0].toString().replace("@","")
		this.$ = new Select(id_tmp5, _$[$0-1].first_line, _$[$0-1].first_column)
	
break;
case 19: case 20: case 21: case 22:

		this.$ = new Aritmertic($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
	
break;
case 23:

		this.$ = new Aritmertic($$[$0], "!", $$[$0], _$[$0-1].first_line, _$[$0-1].first_column)
	
break;
case 24: case 25: case 26: case 27: case 28: case 29:

		this.$ = new Relational($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
	
break;
case 30: case 31:

		this.$ = new Logics($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
	
break;
case 32:

		this.$ = new Logics($$[$0], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column)
	
break;
case 33:

		this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type_dxnry.INT)
	
break;
case 34:

		this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type_dxnry.DOUBLE)
	
break;
case 35:

		this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type_dxnry.DATE)
	
break;
case 36:

		let string_tmp = $$[$0].toString().replace('"','')
		string_tmp = string_tmp.replace('"','')
		this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, string_tmp, Type_dxnry.STRING)
	
break;
case 37: case 38:

		this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type_dxnry.BOOLEAN)
	
break;
case 39:

		this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type_dxnry.NULL)
	
break;
case 40:

		console.error('Error sint√°ctico: ' + yytext + ',  linea: ' + this.$.first_line + ', columna: ' + this.$.first_column)
	
break;
case 41:

		this.$ = Type_dxnry.INT
	
break;
case 42:

		this.$ = Type_dxnry.DOUBLE
	
break;
case 43:

		this.$ = Type_dxnry.DATE
	
break;
case 44:

		this.$ = Type_dxnry.STRING
	
break;
case 45:

		this.$ = Type_dxnry.BOOLEAN
	
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class QueryParserLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"QueryParser"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:print\b)/i,/^(?:declare\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:select\b)/i,/^(?:(@[^@\s,]+))/i,/^(?:(\d{4}-\d{2}-\d{2}))/i,/^(?:(\d+\.\d+))/i,/^(?:([0-9]+))/i,/^(?:("([^"\\]|\\.)*"))/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0: return 19
      break;
    case 1: return 26
      break;
    case 2: return 27
      break;
    case 3: return 28
      break;
    case 4: return 29
      break;
    case 5: return 21
      break;
    case 6: return 30
      break;
    case 7: return 31
      break;
    case 8: return 32
      break;
    case 9: return 33
      break;
    case 10: return 34
      break;
    case 11: return 35
      break;
    case 12: return 36
      break;
    case 13: return 37
      break;
    case 14: return 42
      break;
    case 15: return 43
      break;
    case 16: return 44
      break;
    case 17: return 11
      break;
    case 18: return 13
      break;
    case 19: return 45
      break;
    case 20: return 46
      break;
    case 21: return 47
      break;
    case 22: return 48
      break;
    case 23: return 49
      break;
    case 24: return 17
      break;
    case 25: return 20
      break;
    case 26: return 22
      break;
    case 27: return 15
      break;
    case 28: return 40
      break;
    case 29: return 39
      break;
    case 30: return 38
      break;
    case 31: return 41
      break;
    case 32:/* Espacios se ignoran */
      break;
    case 33:return 5;
      break;
    case 34: console.error('Error l√©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
      break;
        }
    }
}

