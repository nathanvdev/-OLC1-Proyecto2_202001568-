/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  	import Print from '../instruction/print.js'
	import Primitive from "../expression/primitives.js"
	import {Type_dxnry} from "../abstrac/Return.js"
  	import {Declarate, Declarate_def, Set, Select} from "../instruction/Declarate.js"
  	import {var_list} from "../instruction/Declarate.js"
  	import Aritmertic from "../expression/Aritmetic.js"
	import Relational from "../expression/Relational.js"
	import Logics from "../expression/Logics.js"
	import ddl_Create_Table from '../instruction/DDl/ddl_Create_Table.js'
	import ddl_Add from '../instruction/DDl/ddl_Add.js'
	import { ddl_Drop_Column, ddl_Drop_Table } from '../instruction/DDl/ddl_Drop.js'
	import ddl_Rename_table from '../instruction/DDl/ddl_Rename_table.js'
	import ddl_Rename_Column from '../instruction/DDl/ddl_Rename_column.js'
	import dml_Insert from '../instruction/DML/dml_Insert.js'
	import { dml_Select, dml_Select_where } from '../instruction/DML/dml_Select.js'
	import dml_Update from '../instruction/DML/dml_update.js'
	import dml_Truncate from '../instruction/DML/dml_Truncate.js'
	import dml_Delete from '../instruction/DML/dml_Delete.js'
	import Cast from '../expression/Cast.js'
	import Statement from '../instruction/Statement.js'
	import If from '../instruction/If.js'
	import Variable from '../expression/Variable.js'
	import Case from '../instruction/Case.js'
  	import Group from '../expression/Group.js'
    import While from '../instruction/While.js'
    import For from '../instruction/For.js'
    import Ffunction from '../instruction/Ffunction.js'
    import Param from '../expression/Param.js'
    import ReturnExpression from '../expression/ReturnExp.js'
    import CallFunction from '../instruction/CallFunction.js'
	import Procedure from '../instruction/Procedure.js'
    import CallProcedure from '../instruction/CallProcedure.js'


import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,18],$V1=[1,19],$V2=[1,20],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,37],$V8=[1,39],$V9=[1,40],$Va=[1,41],$Vb=[1,42],$Vc=[1,43],$Vd=[1,44],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,38],$Vj=[5,21,23,24,26,27,34,36,40,46,48,57,66,68,69,84,87,88,89,94,96,105],$Vk=[1,57],$Vl=[1,58],$Vm=[1,56],$Vn=[1,67],$Vo=[1,66],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,68],$Vx=[1,80],$Vy=[1,99],$Vz=[1,96],$VA=[1,105],$VB=[1,106],$VC=[1,100],$VD=[1,101],$VE=[1,102],$VF=[1,103],$VG=[1,104],$VH=[1,94],$VI=[1,95],$VJ=[1,97],$VK=[1,98],$VL=[22,33,35,45,63,70,71,75,76,77,78,79,80,81,82,83,85,87,88,92,93,95],$VM=[22,33,35,45,63,64,70,71,72,75,76,77,78,79,80,81,82,83,85,87,88,92,93,95],$VN=[1,121],$VO=[1,116],$VP=[1,117],$VQ=[1,118],$VR=[1,119],$VS=[1,120],$VT=[2,47],$VU=[1,126],$VV=[1,131],$VW=[33,45],$VX=[2,93],$VY=[22,33,45,70,71,85,87,88,92,93,95],$VZ=[22,33],$V_=[22,31,33,45,92,95],$V$=[1,179],$V01=[22,33,35,45,70,71,75,76,77,78,79,80,81,85,87,88,92,93,95],$V11=[22,33,35,45,70,71,75,76,77,78,79,85,87,88,92,93,95],$V21=[1,192],$V31=[1,212],$V41=[1,228],$V51=[1,240],$V61=[88,93],$V71=[33,45,92],$V81=[1,260],$V91=[1,261],$Va1=[1,262],$Vb1=[22,70,71,72],$Vc1=[33,64],$Vd1=[1,296],$Ve1=[1,317],$Vf1=[1,313],$Vg1=[1,314],$Vh1=[1,315],$Vi1=[1,316],$Vj1=[22,63,70,71,72,80,81,82,83],$Vk1=[22,70,71,72,80,81];

export class QueryParserParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new QueryParserLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print":7,"declare":8,"set":9,"select":10,"ddl":11,"dml":12,"if":13,"case":14,"while":15,"for":16,"function":17,"call_function":18,"procedure":19,"call_procedure":20,"RBREAK":21,"PUNTOCOMA":22,"RCONTINUE":23,"RRETURN":24,"expresion":25,"RPRINT":26,"RDECLARE":27,"variable_l":28,"VARIABLE_NAME":29,"data_type":30,"RDEFAULT":31,"primitivo":32,"COMMA":33,"RSET":34,"EQUAL":35,"RSELECT":36,"create":37,"alter":38,"drop":39,"RCREATE":40,"RTABLE":41,"ID":42,"PARENIZQ":43,"column_list":44,"PARENDER":45,"RALTER":46,"RADD":47,"RDROP":48,"RCOLUMN":49,"RRENAME":50,"RTO":51,"dml_insert":52,"dml_select":53,"dml_update":54,"dml_truncate":55,"dml_delete":56,"RINSERT":57,"RINTO":58,"id_list":59,"RVALUES":60,"values_list":61,"RFROM":62,"BY":63,"RWHERE":64,"where_conds":65,"RUPDATE":66,"set_columns":67,"RTRUNCATE":68,"RDELETE":69,"AND":70,"OR":71,"NOT":72,"condition":73,"arit_cond":74,"DIFERENT":75,"MINOR":76,"MINOREQUAL":77,"GREATER":78,"GREATEREQUAL":79,"PLUS":80,"LESS":81,"DIVIDED":82,"MODUL":83,"RIF":84,"RTHEN":85,"newStatement":86,"REND":87,"RELSE":88,"RCASE":89,"case_list":90,"a_s":91,"RAS":92,"RWHEN":93,"RWHILE":94,"RBEGIN":95,"RFOR":96,"RIN":97,"ENTERO":98,"RANGO":99,"RFUNCTION":100,"params":101,"RRETURNS":102,"args":103,"RPROCEDURE":104,"RCALL":105,"aritmetica":106,"relacional":107,"logica":108,"cast":109,"DECIMAL":110,"DATE":111,"CADENA":112,"RTRUE":113,"RFALSE":114,"RNULL":115,"RCAST":116,"RINT":117,"RDOUBLE":118,"RDATE":119,"RVARCHAR":120,"RBOOLEAN":121,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",21:"RBREAK",22:"PUNTOCOMA",23:"RCONTINUE",24:"RRETURN",26:"RPRINT",27:"RDECLARE",29:"VARIABLE_NAME",31:"RDEFAULT",33:"COMMA",34:"RSET",35:"EQUAL",36:"RSELECT",40:"RCREATE",41:"RTABLE",42:"ID",43:"PARENIZQ",45:"PARENDER",46:"RALTER",47:"RADD",48:"RDROP",49:"RCOLUMN",50:"RRENAME",51:"RTO",57:"RINSERT",58:"RINTO",60:"RVALUES",62:"RFROM",63:"BY",64:"RWHERE",66:"RUPDATE",68:"RTRUNCATE",69:"RDELETE",70:"AND",71:"OR",72:"NOT",75:"DIFERENT",76:"MINOR",77:"MINOREQUAL",78:"GREATER",79:"GREATEREQUAL",80:"PLUS",81:"LESS",82:"DIVIDED",83:"MODUL",84:"RIF",85:"RTHEN",87:"REND",88:"RELSE",89:"RCASE",92:"RAS",93:"RWHEN",94:"RWHILE",95:"RBEGIN",96:"RFOR",97:"RIN",98:"ENTERO",99:"RANGO",100:"RFUNCTION",102:"RRETURNS",104:"RPROCEDURE",105:"RCALL",110:"DECIMAL",111:"DATE",112:"CADENA",113:"RTRUE",114:"RFALSE",115:"RNULL",116:"RCAST",117:"RINT",118:"RDOUBLE",119:"RDATE",120:"RVARCHAR",121:"RBOOLEAN"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[7,3],[8,3],[8,6],[28,4],[28,2],[9,5],[10,3],[11,1],[11,1],[11,1],[37,7],[44,4],[44,2],[38,7],[38,7],[38,7],[38,9],[39,4],[12,1],[12,1],[12,1],[12,1],[12,1],[52,11],[59,3],[59,1],[61,3],[61,1],[53,5],[53,5],[53,7],[53,7],[54,7],[67,3],[67,5],[55,4],[56,6],[65,3],[65,3],[65,3],[65,1],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[74,3],[74,3],[74,3],[74,3],[74,2],[74,3],[74,1],[13,7],[13,9],[14,7],[14,8],[14,6],[14,7],[91,2],[90,5],[90,4],[86,1],[15,6],[16,10],[17,12],[17,12],[18,6],[103,3],[103,1],[103,0],[19,9],[20,6],[101,4],[101,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,3],[25,1],[25,1],[25,4],[106,3],[106,3],[106,3],[106,3],[106,3],[106,2],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[108,3],[108,3],[108,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[109,6],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,23:$V1,24:$V2,26:$V3,27:$V4,34:$V5,36:$V6,37:25,38:26,39:27,40:$V7,46:$V8,48:$V9,52:28,53:29,54:30,55:31,56:32,57:$Va,66:$Vb,68:$Vc,69:$Vd,84:$Ve,89:$Vf,94:$Vg,96:$Vh,105:$Vi},{1:[3]},{5:[1,45],6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,23:$V1,24:$V2,26:$V3,27:$V4,34:$V5,36:$V6,37:25,38:26,39:27,40:$V7,46:$V8,48:$V9,52:28,53:29,54:30,55:31,56:32,57:$Va,66:$Vb,68:$Vc,69:$Vd,84:$Ve,89:$Vf,94:$Vg,96:$Vh,105:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),{22:[1,47]},{22:[1,48]},{22:[1,49],25:50,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:69,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{28:70,29:[1,71]},{29:[1,72]},{29:[1,73],42:[1,74],59:75,63:[1,76]},o($Vj,[2,29]),o($Vj,[2,30]),o($Vj,[2,31]),o($Vj,[2,40]),o($Vj,[2,41]),o($Vj,[2,42]),o($Vj,[2,43]),o($Vj,[2,44]),{25:77,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:78,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,90:79,93:$Vx,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:81,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{29:[1,82]},{41:[1,85],100:[1,83],104:[1,84]},{42:[1,86]},{41:[1,87]},{41:[1,88]},{58:[1,89]},{42:[1,90]},{41:[1,91]},{62:[1,92]},{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),{22:[1,93],35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},o($VL,[2,98]),o($VL,[2,99]),o($VL,[2,100]),o($VL,[2,101]),o($VL,[2,102]),{25:107,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},o($VL,[2,104]),o($VL,[2,105],{43:[1,108]}),o($VM,[2,122]),o($VM,[2,123]),o($VM,[2,124]),o($VM,[2,125]),o($VM,[2,126]),o($VM,[2,127]),o($VM,[2,128]),{25:109,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:110,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{43:[1,111]},{22:[1,112],35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{22:[1,113],33:[1,114]},{2:$VN,30:115,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS},{35:[1,122]},{22:[1,123]},o([33,62],$VT,{43:[1,124]}),{33:$VU,62:[1,125]},{62:[1,127]},{35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,85:[1,128]},{35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,90:129,93:$Vx},{88:[1,130],93:$VV},{25:132,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,95:[1,133]},{97:[1,134]},{42:[1,135]},{42:[1,136]},{42:[1,137]},{43:[1,138]},{42:[1,139]},{42:[1,140]},{42:[1,141]},{34:[1,142]},{42:[1,143]},{42:[1,144]},o($Vj,[2,21]),{25:145,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:146,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:147,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:148,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:149,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:150,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:151,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:152,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:153,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:154,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:155,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:156,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:157,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{35:$Vy,45:[1,158],63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},o($VW,$VX,{32:51,106:52,107:53,108:54,109:55,103:159,25:160,29:$Vk,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw}),o($VL,[2,112]),o($VY,[2,121],{35:$Vy,63:$Vz,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),{25:161,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},o($Vj,[2,22]),o($Vj,[2,23]),{29:[1,162]},o($VZ,[2,26],{31:[1,163]}),o($V_,[2,130]),o($V_,[2,131]),o($V_,[2,132]),o($V_,[2,133]),o($V_,[2,134]),o($V_,[2,135]),{25:164,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},o($Vj,[2,28]),o($VW,$VX,{32:51,106:52,107:53,108:54,109:55,25:160,103:165,29:$Vk,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw}),{42:[1,166]},{42:[1,167]},{42:[1,168]},{4:170,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,23:$V1,24:$V2,26:$V3,27:$V4,34:$V5,36:$V6,37:25,38:26,39:27,40:$V7,46:$V8,48:$V9,52:28,53:29,54:30,55:31,56:32,57:$Va,66:$Vb,68:$Vc,69:$Vd,84:$Ve,86:169,89:$Vf,94:$Vg,96:$Vh,105:$Vi},{88:[1,171],93:$VV},{25:172,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{25:173,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,85:[1,174]},{4:170,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,23:$V1,24:$V2,26:$V3,27:$V4,34:$V5,36:$V6,37:25,38:26,39:27,40:$V7,46:$V8,48:$V9,52:28,53:29,54:30,55:31,56:32,57:$Va,66:$Vb,68:$Vc,69:$Vd,84:$Ve,86:175,89:$Vf,94:$Vg,96:$Vh,105:$Vi},{98:[1,176]},{43:[1,177]},{29:$V$,101:178},{43:[1,180]},o($VW,$VX,{32:51,106:52,107:53,108:54,109:55,25:160,103:181,29:$Vk,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw}),{47:[1,182],48:[1,183],50:[1,184]},{22:[1,185]},{43:[1,186]},{42:[1,188],67:187},{22:[1,189]},{64:[1,190]},o($V01,[2,107],{63:$Vz,82:$VJ,83:$VK}),o($V01,[2,108],{63:$Vz,82:$VJ,83:$VK}),o($VL,[2,109]),o($VL,[2,110]),o($VL,[2,111]),o($V11,[2,113],{63:$Vz,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V11,[2,114],{63:$Vz,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V11,[2,115],{63:$Vz,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V11,[2,116],{63:$Vz,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V11,[2,117],{63:$Vz,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V11,[2,118],{63:$Vz,80:$VH,81:$VI,82:$VJ,83:$VK}),o($VY,[2,119],{35:$Vy,63:$Vz,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o([22,33,45,71,85,87,88,92,93,95],[2,120],{35:$Vy,63:$Vz,70:$VA,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($VL,[2,103]),{33:$V21,45:[1,191]},o($VW,[2,92],{35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),{35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,92:[1,193]},{2:$VN,30:194,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS},{32:195,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{22:[1,196],35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{33:$V21,45:[1,197]},{22:[1,198],64:[1,199]},o([33,45,62],[2,46]),{22:[1,200],64:[1,201]},{87:[1,202],88:[1,203]},o([87,88],[2,85],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,37:25,38:26,39:27,52:28,53:29,54:30,55:31,56:32,6:46,21:$V0,23:$V1,24:$V2,26:$V3,27:$V4,34:$V5,36:$V6,40:$V7,46:$V8,48:$V9,57:$Va,66:$Vb,68:$Vc,69:$Vd,84:$Ve,89:$Vf,94:$Vg,96:$Vh,105:$Vi}),{25:204,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,87:[1,205]},{35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,85:[1,206]},{25:207,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{87:[1,208]},{99:[1,209]},{29:$V$,101:210},{33:$V31,92:[1,211]},{2:$VN,30:213,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS},{42:[1,215],44:214},{33:$V21,45:[1,216]},{42:[1,217]},{49:[1,218]},{49:[1,220],51:[1,219]},o($Vj,[2,39]),{42:[1,222],59:221},{33:[1,224],64:[1,223]},{35:[1,225]},o($Vj,[2,57]),{42:$V41,65:226,73:227},o($VL,[2,106]),{25:229,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},{2:$VN,30:230,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS},o($VZ,[2,25]),{22:[1,231]},o($Vj,[2,27]),{22:[1,232]},o($Vj,[2,50]),{42:$V41,65:233,73:227},o($Vj,[2,51]),{42:$V41,65:234,73:227},{84:[1,235]},{4:170,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,23:$V1,24:$V2,26:$V3,27:$V4,34:$V5,36:$V6,37:25,38:26,39:27,40:$V7,46:$V8,48:$V9,52:28,53:29,54:30,55:31,56:32,57:$Va,66:$Vb,68:$Vc,69:$Vd,84:$Ve,86:236,89:$Vf,94:$Vg,96:$Vh,105:$Vi},{35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,87:[1,237]},{22:[1,238],91:239,92:$V51},{25:241,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},o($V61,[2,84],{35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),{22:[1,242]},{98:[1,243]},{33:$V31,45:[1,244]},{95:[1,245]},{29:[1,246]},o($V71,[2,97]),{33:[1,248],45:[1,247]},{2:$VN,30:249,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS},{22:[1,250]},{2:$VN,30:251,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS},{42:[1,252]},{42:[1,253]},{42:[1,254]},{33:$VU,45:[1,255]},o($VW,$VT),{42:$V41,65:256,73:227},{42:[1,257]},{32:258,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{22:[1,259],70:$V81,71:$V91,72:$Va1},o($Vb1,[2,62]),{35:[1,263],75:[1,264],76:[1,265],77:[1,266],78:[1,267],79:[1,268]},o($VW,[2,91],{35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),{45:[1,269]},o($Vj,[2,24]),o($Vj,[2,90]),{22:[1,270],70:$V81,71:$V91,72:$Va1},{22:[1,271],70:$V81,71:$V91,72:$Va1},{22:[1,272]},{87:[1,273]},{22:[1,274],91:275,92:$V51},o($Vj,[2,80]),{22:[1,276]},{25:277,29:$Vk,32:51,42:$Vl,43:$Vm,72:$Vn,81:$Vo,98:$Vp,106:52,107:53,108:54,109:55,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw},o($V61,[2,83],{35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($Vj,[2,86]),{95:[1,278]},{24:[1,279],102:[1,280]},{4:170,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,23:$V1,24:$V2,26:$V3,27:$V4,34:$V5,36:$V6,37:25,38:26,39:27,40:$V7,46:$V8,48:$V9,52:28,53:29,54:30,55:31,56:32,57:$Va,66:$Vb,68:$Vc,69:$Vd,84:$Ve,86:281,89:$Vf,94:$Vg,96:$Vh,105:$Vi},{2:$VN,30:282,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS},{22:[1,283]},{42:[1,284]},o($VW,[2,34]),o($Vj,[2,95]),{22:[1,285]},{22:[1,286]},{22:[1,287]},{51:[1,288]},{60:[1,289]},{22:[1,290],70:$V81,71:$V91,72:$Va1},{35:[1,291]},o($Vc1,[2,55]),o($Vj,[2,58]),{42:$V41,65:292,73:227},{42:$V41,65:293,73:227},{42:$V41,65:294,73:227},{32:297,74:295,81:$Vd1,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{32:297,74:298,81:$Vd1,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{32:297,74:299,81:$Vd1,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{32:297,74:300,81:$Vd1,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{32:297,74:301,81:$Vd1,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{32:297,74:302,81:$Vd1,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},o($VL,[2,129]),o($Vj,[2,52]),o($Vj,[2,53]),o($Vj,[2,76]),{84:[1,303]},o($Vj,[2,78]),{22:[1,304]},o($Vj,[2,81]),{22:[2,82],35:$Vy,63:$Vz,70:$VA,71:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{4:170,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,23:$V1,24:$V2,26:$V3,27:$V4,34:$V5,36:$V6,37:25,38:26,39:27,40:$V7,46:$V8,48:$V9,52:28,53:29,54:30,55:31,56:32,57:$Va,66:$Vb,68:$Vc,69:$Vd,84:$Ve,86:305,89:$Vf,94:$Vg,96:$Vh,105:$Vi},{2:$VN,30:306,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS},{2:$VN,30:307,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS},{87:[1,308]},o($V71,[2,96]),o($Vj,[2,32]),{2:$VN,30:309,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS},o($Vj,[2,35]),o($Vj,[2,36]),o($Vj,[2,37]),{42:[1,310]},{43:[1,311]},o($Vj,[2,54]),{32:312,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},o([22,70,71],[2,59],{72:$Va1}),o([22,71],[2,60],{70:$V81,72:$Va1}),o($Vb1,[2,61]),o($Vb1,[2,63],{63:$Ve1,80:$Vf1,81:$Vg1,82:$Vh1,83:$Vi1}),{32:297,74:318,81:$Vd1,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},o($Vj1,[2,75]),o($Vb1,[2,64],{63:$Ve1,80:$Vf1,81:$Vg1,82:$Vh1,83:$Vi1}),o($Vb1,[2,65],{63:$Ve1,80:$Vf1,81:$Vg1,82:$Vh1,83:$Vi1}),o($Vb1,[2,66],{63:$Ve1,80:$Vf1,81:$Vg1,82:$Vh1,83:$Vi1}),o($Vb1,[2,67],{63:$Ve1,80:$Vf1,81:$Vg1,82:$Vh1,83:$Vi1}),o($Vb1,[2,68],{63:$Ve1,80:$Vf1,81:$Vg1,82:$Vh1,83:$Vi1}),{22:[1,319]},o($Vj,[2,79]),{87:[1,320]},{95:[1,321]},{95:[1,322]},{22:[1,323]},o($VW,[2,33]),{22:[1,324]},{32:326,61:325,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},o($Vc1,[2,56]),{32:297,74:327,81:$Vd1,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{32:297,74:328,81:$Vd1,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{32:297,74:329,81:$Vd1,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{32:297,74:330,81:$Vd1,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{32:297,74:331,81:$Vd1,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},o($Vj1,[2,73]),o($Vj,[2,77]),{22:[1,332]},{4:170,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,23:$V1,24:$V2,26:$V3,27:$V4,34:$V5,36:$V6,37:25,38:26,39:27,40:$V7,46:$V8,48:$V9,52:28,53:29,54:30,55:31,56:32,57:$Va,66:$Vb,68:$Vc,69:$Vd,84:$Ve,86:333,89:$Vf,94:$Vg,96:$Vh,105:$Vi},{4:170,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,23:$V1,24:$V2,26:$V3,27:$V4,34:$V5,36:$V6,37:25,38:26,39:27,40:$V7,46:$V8,48:$V9,52:28,53:29,54:30,55:31,56:32,57:$Va,66:$Vb,68:$Vc,69:$Vd,84:$Ve,86:334,89:$Vf,94:$Vg,96:$Vh,105:$Vi},o($Vj,[2,94]),o($Vj,[2,38]),{33:[1,336],45:[1,335]},o($VW,[2,49]),o($Vk1,[2,69],{63:$Ve1,82:$Vh1,83:$Vi1}),o($Vk1,[2,70],{63:$Ve1,82:$Vh1,83:$Vi1}),o($Vj1,[2,71]),o($Vj1,[2,72]),o($Vj1,[2,74]),o($Vj,[2,87]),{87:[1,337]},{87:[1,338]},{22:[1,339]},{32:340,98:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{22:[1,341]},{22:[1,342]},o($Vj,[2,45]),o($VW,[2,48]),o($Vj,[2,88]),o($Vj,[2,89])];
    defaultActions: {[key:number]: any} = {45:[2,1]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

		return $$[$0-1]
	
break;
case 2:

		$$[$0-1].push($$[$0])
		this.$ = $$[$0-1]
	
break;
case 3: case 92:

		this.$ = [$$[$0]]
	
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 29: case 30: case 31: case 40: case 41: case 42: case 43: case 44: case 62: case 75: case 82: case 98: case 99: case 100: case 101: case 102: case 105:

		this.$ = $$[$0]
	
break;
case 18:

		this.$ = new Primitive( null, Type_dxnry.BREAK)
	
break;
case 19:

		this.$ = new Primitive( null, Type_dxnry.CONTINUE)
	
break;
case 20:
 
		this.$ = new ReturnExpression( null, Type_dxnry.RETURN); 
	
break;
case 21:
 
		this.$ = new ReturnExpression( $$[$0-1], Type_dxnry.RETURN); 
	
break;
case 22:

		this.$ = new Print( $$[$0-1])
	
break;
case 23:

		this.$ = new Declarate($$[$0-1])
	
break;
case 24:

		// DECLARE @id INT DEFAULT 1
		this.$ = new Declarate_def($$[$0-4], $$[$0-3], $$[$0-1])
	
break;
case 25:

		$$[$0-3].push(new var_list($$[$0-1], $$[$0]))
		this.$ = $$[$0-3]
	
break;
case 26:



		this.$ = [new var_list($$[$0-1], $$[$0])]
	
break;
case 27:

		this.$ = new Set($$[$0-3], $$[$0-1])
	
break;
case 28:

		this.$ = new Select($$[$0-1])
	
break;
case 32:

		this.$ = new ddl_Create_Table($$[$0-4], $$[$0-2])
	
break;
case 33:

		this.$ = $$[$0-3]
		$$[$0-3].push([$$[$0-1], $$[$0]])
	
break;
case 34:

		this.$ = []
		this.$.push([$$[$0-1], $$[$0]])
	
break;
case 35:

		this.$ = new ddl_Add($$[$0-4], $$[$0-2], $$[$0-1])
	
break;
case 36:

		this.$ = new ddl_Drop_Column($$[$0-4], $$[$0-1])
	
break;
case 37:

		this.$ = new ddl_Rename_table($$[$0-4], $$[$0-1])
	
break;
case 38:

		this.$ = new ddl_Rename_Column($$[$0-6], $$[$0-3], $$[$0-1])
	
break;
case 39:

		this.$ = new ddl_Drop_Table($$[$0-1])
	
break;
case 45:

		this.$ = new dml_Insert($$[$0-8], $$[$0-6], $$[$0-2])
	
break;
case 46: case 48:

		this.$ = $$[$0-2]
		$$[$0-2].push($$[$0])
	
break;
case 47: case 49:

		this.$ = []
		this.$.push($$[$0])
	
break;
case 50:

		this.$ = new dml_Select($$[$0-3], $$[$0-1])
	
break;
case 51:

		this.$ = new dml_Select("*", $$[$0-1])
	
break;
case 52:

		this.$ = new dml_Select_where($$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 53:

		this.$ = new dml_Select_where("*", $$[$0-3], $$[$0-1])
	
break;
case 54:

		this.$ = new dml_Update($$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 55: case 84:

		this.$ = []
		this.$.push([$$[$0-2], $$[$0]])
	
break;
case 56: case 83:

		this.$ = $$[$0-4]
		$$[$0-4].push([$$[$0-2], $$[$0]])
	
break;
case 57:

		this.$ = new dml_Truncate($$[$0-1])
	
break;
case 58:

		this.$ = new dml_Delete($$[$0-3], $$[$0-1])
	
break;
case 59: case 60: case 61: case 119: case 120:

		this.$ = new Logics($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 63: case 64: case 65: case 66: case 67: case 68: case 113: case 114: case 115: case 116: case 117: case 118:

		this.$ = new Relational($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 69: case 70: case 71: case 72: case 74: case 107: case 108: case 109: case 110: case 111:

		this.$ = new Aritmertic($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 73: case 112:

		this.$ = new Aritmertic($$[$0], "!", $$[$0])
	
break;
case 76:

		this.$ = new If($$[$0-5], $$[$0-3], null)
	
break;
case 77:

		this.$ = new If($$[$0-7], $$[$0-5], $$[$0-3])
	
break;
case 78:

		this.$ = new Case($$[$0-5], $$[$0-4], $$[$0-2], null)
	
break;
case 79:

		this.$ = new Case($$[$0-6], $$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 80:

		this.$ = new Case(null, $$[$0-4], $$[$0-2], null)
	
break;
case 81:

		this.$ = new Case(null, $$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 85:

		this.$ = new Statement($$[$0])
	
break;
case 86:

		this.$ = new While($$[$0-4], $$[$0-2])
	
break;
case 87:

		this.$ = new For(new Variable($$[$0-8]), parseInt($$[$0-6]), parseInt($$[$0-4]), $$[$0-2])
	
break;
case 88: case 89:

		this.$ = new Ffunction($$[$0-9], $$[$0-7], $$[$0-4], $$[$0-2])
	
break;
case 90:

		this.$ = new CallFunction($$[$0-4], $$[$0-2])
	
break;
case 91:

		$$[$0-2].push($$[$0])
		this.$ = $$[$0-2]
	
break;
case 93:

		this.$ = []
	
break;
case 94:

		this.$ = new Procedure($$[$0-6], $$[$0-5], $$[$0-2])
	
break;
case 95:

		this.$ = new CallProcedure($$[$0-4], $$[$0-2])
	
break;
case 96:

		$$[$0-3].push( new Param($$[$0-1], $$[$0]));
        this.$ = $$[$0-3];
	
break;
case 97:

		let param = new Param($$[$0-1], $$[$0])
		let params = [];
		params.push(param);
		this.$ = params;
	
break;
case 103:

		this.$ = new Group($$[$0-1])
	
break;
case 104:

		this.$ = new Variable($$[$0])
	
break;
case 106:

		this.$ = new CallFunction($$[$0-3], $$[$0-1])
	
break;
case 121:

		this.$ = new Logics($$[$0], $$[$0-1], $$[$0])
	
break;
case 122:

		this.$ = new Primitive( $$[$0], Type_dxnry.INT)
	
break;
case 123:

		this.$ = new Primitive( $$[$0], Type_dxnry.DOUBLE)
	
break;
case 124:

		this.$ = new Primitive( $$[$0], Type_dxnry.DATE)
	
break;
case 125:

		let string_tmp = $$[$0].toString().replace('"','')
		string_tmp = string_tmp.replace('"','')
		this.$ = new Primitive( string_tmp, Type_dxnry.STRING)
	
break;
case 126: case 127:

		this.$ = new Primitive( $$[$0], Type_dxnry.BOOLEAN)
	
break;
case 128:

		this.$ = new Primitive( $$[$0], Type_dxnry.NULL)
	
break;
case 129:

		this.$ = new Cast( $$[$0-3], $$[$0-1])
	
break;
case 130:

		this.$ = Type_dxnry.INT
	
break;
case 131:

		this.$ = Type_dxnry.DOUBLE
	
break;
case 132:

		this.$ = Type_dxnry.DATE
	
break;
case 133:

		this.$ = Type_dxnry.STRING
	
break;
case 134:

		this.$ = Type_dxnry.BOOLEAN
	
break;
case 135:

		console.error('Error sintáctico: ' + yytext + ',  linea: ' + this.$.first_line + ', columna: ' + this.$.first_column)
	
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class QueryParserLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"QueryParser"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\*)/i,/^(?:\.\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:print\b)/i,/^(?:declare\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:default\b)/i,/^(?:end\b)/i,/^(?:set\b)/i,/^(?:select\b)/i,/^(?:create\b)/i,/^(?:table\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:cast\b)/i,/^(?:as\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:when\b)/i,/^(?:case\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:returns\b)/i,/^(?:procedure\b)/i,/^(?:call\b)/i,/^(?:(@[^@\s,;()-]+))/i,/^(?:(\d{4}-\d{2}-\d{2}))/i,/^(?:(\d+\.\d+))/i,/^(?:([0-9]+))/i,/^(?:("([^"\\]|\\.)*"))/i,/^(?:([a-z_][a-z0-9_]*))/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0: return 63
      break;
    case 1: return 99
      break;
    case 2: return 43
      break;
    case 3: return 45
      break;
    case 4: return 22
      break;
    case 5: return 33
      break;
    case 6: return 80
      break;
    case 7: return 81
      break;
    case 8: return 82
      break;
    case 9: return 83
      break;
    case 10: return 79
      break;
    case 11: return 77
      break;
    case 12: return 75
      break;
    case 13: return 35
      break;
    case 14: return 76
      break;
    case 15: return 78
      break;
    case 16: return 70
      break;
    case 17: return 71
      break;
    case 18: return 72
      break;
    case 19: return 113
      break;
    case 20: return 114
      break;
    case 21: return 115
      break;
    case 22: return 26
      break;
    case 23: return 27
      break;
    case 24: return 117
      break;
    case 25: return 118
      break;
    case 26: return 119
      break;
    case 27: return 120
      break;
    case 28: return 121
      break;
    case 29: return 31
      break;
    case 30: return 87
      break;
    case 31: return 34
      break;
    case 32: return 36
      break;
    case 33: return 40
      break;
    case 34: return 41
      break;
    case 35: return 46
      break;
    case 36: return 47
      break;
    case 37: return 48
      break;
    case 38: return 49
      break;
    case 39: return 50
      break;
    case 40: return 51
      break;
    case 41: return 57
      break;
    case 42: return 58
      break;
    case 43: return 60
      break;
    case 44: return 62
      break;
    case 45: return 64
      break;
    case 46: return 66
      break;
    case 47: return 68
      break;
    case 48: return 69
      break;
    case 49: return 116
      break;
    case 50: return 92
      break;
    case 51: return 84
      break;
    case 52: return 85
      break;
    case 53: return 88
      break;
    case 54: return 93
      break;
    case 55: return 89
      break;
    case 56: return 95
      break;
    case 57: return 87
      break;
    case 58: return 94
      break;
    case 59: return 96
      break;
    case 60: return 97
      break;
    case 61: return 21
      break;
    case 62: return 23
      break;
    case 63: return 100
      break;
    case 64: return 24
      break;
    case 65: return 102
      break;
    case 66: return 104
      break;
    case 67: return 105
      break;
    case 68: return 29
      break;
    case 69: return 111
      break;
    case 70: return 110
      break;
    case 71: return 98
      break;
    case 72: return 112
      break;
    case 73: return 42
      break;
    case 74:/* Espacios se ignoran */
      break;
    case 75:return 5;
      break;
    case 76: console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
      break;
        }
    }
}

