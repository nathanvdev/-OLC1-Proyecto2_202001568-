/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  	import Print from '../instruction/print.js'
	import Primitive from "../expression/primitives.js"
	import {Type_dxnry} from "../abstrac/Return.js"
  	import {Declarate, Declarate_def, Set, Select} from "../instruction/Declarate.js"
  	import {var_list} from "../instruction/Declarate.js"
  	import Aritmertic from "../expression/Aritmetic.js"
	import Relational from "../expression/Relational.js"
	import Logics from "../expression/Logics.js"
	import ddl_Create_Table from '../instruction/DDl/ddl_Create_Table.js'
	import ddl_Add from '../instruction/DDl/ddl_Add.js'
	import { ddl_Drop_Column, ddl_Drop_Table } from '../instruction/DDl/ddl_Drop.js'
	import ddl_Rename_table from '../instruction/DDl/ddl_Rename_table.js'
	import ddl_Rename_Column from '../instruction/DDl/ddl_Rename_column.js'
	import dml_Insert from '../instruction/DML/dml_Insert.js'
	import { dml_Select, dml_Select_where } from '../instruction/DML/dml_Select.js'
	import dml_Update from '../instruction/DML/dml_update.js'
	import dml_Truncate from '../instruction/DML/dml_Truncate.js'
	import dml_Delete from '../instruction/DML/dml_Delete.js'
	import Cast from '../expression/Cast.js'
	import Statement from '../instruction/Statement.js'
	import If from '../instruction/If.js'
	import Variable from '../expression/Variable.js'
	import Case from '../instruction/Case.js'
  	import Group from '../expression/Group.js'
    import While from '../instruction/While.js'


import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[5,16,19,26,28,32,38,40,49,58,60,61,76,79,80,81,86],$Vf=[1,44],$Vg=[1,43],$Vh=[1,53],$Vi=[1,52],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,54],$Vr=[1,61],$Vs=[1,65],$Vt=[1,79],$Vu=[1,85],$Vv=[1,86],$Vw=[1,80],$Vx=[1,81],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[18,27,37,62,63,67,68,69,70,71,72,73,74,75,77,79,80,84,85,87],$VG=[18,25,27,37,56,62,63,64,67,68,69,70,71,72,73,74,75,77,79,80,84,85,87],$VH=[1,99],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,103],$VO=[25,37,54],$VP=[1,108],$VQ=[18,37,62,63,77,79,80,84,85,87],$VR=[18,25],$VS=[18,23,25,37],$VT=[18,27,37,62,63,67,68,69,70,71,72,73,77,79,80,84,85,87],$VU=[18,27,37,62,63,67,68,69,70,71,77,79,80,84,85,87],$VV=[1,182],$VW=[1,192],$VX=[80,85],$VY=[1,207],$VZ=[1,208],$V_=[1,209],$V$=[18,62,63,64],$V01=[25,37],$V11=[25,56],$V21=[1,238],$V31=[1,251],$V41=[1,252],$V51=[1,253],$V61=[1,254],$V71=[18,62,63,64,72,73,74,75],$V81=[18,62,63,64,72,73];

export class QueryParserParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new QueryParserLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print":7,"declare":8,"set":9,"select":10,"ddl":11,"dml":12,"if":13,"case":14,"while":15,"RPRINT":16,"expresion":17,"PUNTOCOMA":18,"RDECLARE":19,"variable_l":20,"VARIABLE_NAME":21,"data_type":22,"RDEFAULT":23,"primitivo":24,"COMMA":25,"RSET":26,"EQUAL":27,"RSELECT":28,"create":29,"alter":30,"drop":31,"RCREATE":32,"RTABLE":33,"ID":34,"PARENIZQ":35,"column_list":36,"PARENDER":37,"RALTER":38,"RADD":39,"RDROP":40,"RCOLUMN":41,"RRENAME":42,"RTO":43,"dml_insert":44,"dml_select":45,"dml_update":46,"dml_truncate":47,"dml_delete":48,"RINSERT":49,"RINTO":50,"id_list":51,"RVALUES":52,"values_list":53,"RFROM":54,"BY":55,"RWHERE":56,"where_conds":57,"RUPDATE":58,"set_columns":59,"RTRUNCATE":60,"RDELETE":61,"AND":62,"OR":63,"NOT":64,"condition":65,"arit_cond":66,"DIFERENT":67,"MINOR":68,"MINOREQUAL":69,"GREATER":70,"GREATEREQUAL":71,"PLUS":72,"LESS":73,"DIVIDED":74,"MODUL":75,"RIF":76,"RTHEN":77,"newStatement":78,"REND":79,"RELSE":80,"RCASE":81,"case_list":82,"a_s":83,"RAS":84,"RWHEN":85,"RWHILE":86,"RBEGIN":87,"aritmetica":88,"relacional":89,"logica":90,"cast":91,"ENTERO":92,"DECIMAL":93,"DATE":94,"CADENA":95,"RTRUE":96,"RFALSE":97,"RNULL":98,"RCAST":99,"RINT":100,"RDOUBLE":101,"RDATE":102,"RVARCHAR":103,"RBOOLEAN":104,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",16:"RPRINT",18:"PUNTOCOMA",19:"RDECLARE",21:"VARIABLE_NAME",23:"RDEFAULT",25:"COMMA",26:"RSET",27:"EQUAL",28:"RSELECT",32:"RCREATE",33:"RTABLE",34:"ID",35:"PARENIZQ",37:"PARENDER",38:"RALTER",39:"RADD",40:"RDROP",41:"RCOLUMN",42:"RRENAME",43:"RTO",49:"RINSERT",50:"RINTO",52:"RVALUES",54:"RFROM",55:"BY",56:"RWHERE",58:"RUPDATE",60:"RTRUNCATE",61:"RDELETE",62:"AND",63:"OR",64:"NOT",67:"DIFERENT",68:"MINOR",69:"MINOREQUAL",70:"GREATER",71:"GREATEREQUAL",72:"PLUS",73:"LESS",74:"DIVIDED",75:"MODUL",76:"RIF",77:"RTHEN",79:"REND",80:"RELSE",81:"RCASE",84:"RAS",85:"RWHEN",86:"RWHILE",87:"RBEGIN",92:"ENTERO",93:"DECIMAL",94:"DATE",95:"CADENA",96:"RTRUE",97:"RFALSE",98:"RNULL",99:"RCAST",100:"RINT",101:"RDOUBLE",102:"RDATE",103:"RVARCHAR",104:"RBOOLEAN"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,3],[8,3],[8,6],[20,4],[20,2],[9,5],[10,3],[11,1],[11,1],[11,1],[29,7],[36,4],[36,2],[30,7],[30,7],[30,7],[30,9],[31,4],[12,1],[12,1],[12,1],[12,1],[12,1],[44,11],[51,3],[51,1],[53,3],[53,1],[45,5],[45,5],[45,7],[45,7],[46,7],[59,3],[59,5],[47,4],[48,6],[57,3],[57,3],[57,3],[57,1],[65,3],[65,3],[65,3],[65,3],[65,3],[65,3],[66,3],[66,3],[66,3],[66,3],[66,2],[66,1],[13,7],[13,9],[14,7],[14,8],[14,6],[14,7],[83,2],[82,5],[82,4],[78,1],[15,6],[17,1],[17,1],[17,1],[17,1],[17,1],[17,3],[17,1],[88,3],[88,3],[88,3],[88,3],[88,2],[89,3],[89,3],[89,3],[89,3],[89,3],[89,3],[90,3],[90,3],[90,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[91,6],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,19:$V1,26:$V2,28:$V3,29:17,30:18,31:19,32:$V4,38:$V5,40:$V6,44:20,45:21,46:22,47:23,48:24,49:$V7,58:$V8,60:$V9,61:$Va,76:$Vb,81:$Vc,86:$Vd},{1:[3]},{5:[1,35],6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,19:$V1,26:$V2,28:$V3,29:17,30:18,31:19,32:$V4,38:$V5,40:$V6,44:20,45:21,46:22,47:23,48:24,49:$V7,58:$V8,60:$V9,61:$Va,76:$Vb,81:$Vc,86:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),{17:37,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{20:55,21:[1,56]},{21:[1,57]},{21:[1,58],34:$Vr,51:59,55:[1,60]},o($Ve,[2,20]),o($Ve,[2,21]),o($Ve,[2,22]),o($Ve,[2,31]),o($Ve,[2,32]),o($Ve,[2,33]),o($Ve,[2,34]),o($Ve,[2,35]),{17:62,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:63,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,82:64,85:$Vs,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:66,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{33:[1,67]},{33:[1,68]},{33:[1,69]},{50:[1,70]},{34:[1,71]},{33:[1,72]},{54:[1,73]},{1:[2,1]},o($Ve,[2,2]),{18:[1,74],27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE},o($VF,[2,77]),o($VF,[2,78]),o($VF,[2,79]),o($VF,[2,80]),o($VF,[2,81]),{17:87,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},o($VF,[2,83]),o($VG,[2,98]),o($VG,[2,99]),o($VG,[2,100]),o($VG,[2,101]),o($VG,[2,102]),o($VG,[2,103]),o($VG,[2,104]),{17:88,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:89,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{35:[1,90]},{18:[1,91],25:[1,92]},{2:$VH,22:93,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM},{27:[1,100]},{18:[1,101]},{25:$VN,54:[1,102]},{54:[1,104]},o($VO,[2,38]),{27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,77:[1,105]},{27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,82:106,85:$Vs},{80:[1,107],85:$VP},{17:109,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,87:[1,110]},{34:[1,111]},{34:[1,112]},{34:[1,113]},{34:[1,114]},{26:[1,115]},{34:[1,116]},{34:[1,117]},o($Ve,[2,13]),{17:118,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:119,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:120,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:121,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:122,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:123,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:124,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:125,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:126,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:127,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:128,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:129,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{27:$Vt,37:[1,130],62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE},o($VF,[2,88]),o($VQ,[2,97],{27:$Vt,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),{17:131,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},o($Ve,[2,14]),{21:[1,132]},o($VR,[2,17],{23:[1,133]}),o($VS,[2,106]),o($VS,[2,107]),o($VS,[2,108]),o($VS,[2,109]),o($VS,[2,110]),o($VS,[2,111]),{17:134,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},o($Ve,[2,19]),{34:[1,135]},{34:[1,136]},{34:[1,137]},{4:139,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,19:$V1,26:$V2,28:$V3,29:17,30:18,31:19,32:$V4,38:$V5,40:$V6,44:20,45:21,46:22,47:23,48:24,49:$V7,58:$V8,60:$V9,61:$Va,76:$Vb,78:138,81:$Vc,86:$Vd},{80:[1,140],85:$VP},{17:141,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{17:142,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,77:[1,143]},{4:139,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,19:$V1,26:$V2,28:$V3,29:17,30:18,31:19,32:$V4,38:$V5,40:$V6,44:20,45:21,46:22,47:23,48:24,49:$V7,58:$V8,60:$V9,61:$Va,76:$Vb,78:144,81:$Vc,86:$Vd},{35:[1,145]},{39:[1,146],40:[1,147],42:[1,148]},{18:[1,149]},{35:[1,150]},{34:[1,152],59:151},{18:[1,153]},{56:[1,154]},o($VT,[2,84],{74:$VD,75:$VE}),o($VT,[2,85],{74:$VD,75:$VE}),o($VF,[2,86]),o($VF,[2,87]),o($VU,[2,89],{72:$VB,73:$VC,74:$VD,75:$VE}),o($VU,[2,90],{72:$VB,73:$VC,74:$VD,75:$VE}),o($VU,[2,91],{72:$VB,73:$VC,74:$VD,75:$VE}),o($VU,[2,92],{72:$VB,73:$VC,74:$VD,75:$VE}),o($VU,[2,93],{72:$VB,73:$VC,74:$VD,75:$VE}),o($VU,[2,94],{72:$VB,73:$VC,74:$VD,75:$VE}),o($VQ,[2,95],{27:$Vt,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o([18,37,63,77,79,80,84,85,87],[2,96],{27:$Vt,62:$Vu,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o($VF,[2,82]),{27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,84:[1,155]},{2:$VH,22:156,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM},{24:157,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{18:[1,158],27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE},{18:[1,159],56:[1,160]},o($VO,[2,37]),{18:[1,161],56:[1,162]},{79:[1,163],80:[1,164]},o([79,80],[2,75],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,29:17,30:18,31:19,44:20,45:21,46:22,47:23,48:24,6:36,16:$V0,19:$V1,26:$V2,28:$V3,32:$V4,38:$V5,40:$V6,49:$V7,58:$V8,60:$V9,61:$Va,76:$Vb,81:$Vc,86:$Vd}),{17:165,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,79:[1,166]},{27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,77:[1,167]},{17:168,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},{79:[1,169]},{34:[1,171],36:170},{34:[1,172]},{41:[1,173]},{41:[1,175],43:[1,174]},o($Ve,[2,30]),{34:$Vr,51:176},{25:[1,178],56:[1,177]},{27:[1,179]},o($Ve,[2,48]),{34:$VV,57:180,65:181},{2:$VH,22:183,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM},o($VR,[2,16]),{18:[1,184]},o($Ve,[2,18]),o($Ve,[2,41]),{34:$VV,57:185,65:181},o($Ve,[2,42]),{34:$VV,57:186,65:181},{76:[1,187]},{4:139,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,19:$V1,26:$V2,28:$V3,29:17,30:18,31:19,32:$V4,38:$V5,40:$V6,44:20,45:21,46:22,47:23,48:24,49:$V7,58:$V8,60:$V9,61:$Va,76:$Vb,78:188,81:$Vc,86:$Vd},{27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,79:[1,189]},{18:[1,190],83:191,84:$VW},{17:193,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},o($VX,[2,74],{27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),{18:[1,194]},{25:[1,196],37:[1,195]},{2:$VH,22:197,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM},{2:$VH,22:198,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM},{34:[1,199]},{34:[1,200]},{34:[1,201]},{25:$VN,37:[1,202]},{34:$VV,57:203,65:181},{34:[1,204]},{24:205,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{18:[1,206],62:$VY,63:$VZ,64:$V_},o($V$,[2,53]),{27:[1,210],67:[1,211],68:[1,212],69:[1,213],70:[1,214],71:[1,215]},{37:[1,216]},o($Ve,[2,15]),{18:[1,217],62:$VY,63:$VZ,64:$V_},{18:[1,218],62:$VY,63:$VZ,64:$V_},{18:[1,219]},{79:[1,220]},{18:[1,221],83:222,84:$VW},o($Ve,[2,70]),{18:[1,223]},{17:224,21:$Vf,24:38,35:$Vg,64:$Vh,73:$Vi,88:39,89:40,90:41,91:42,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:$Vq},o($VX,[2,73],{27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o($Ve,[2,76]),{18:[1,225]},{34:[1,226]},o($V01,[2,25]),{18:[1,227]},{18:[1,228]},{18:[1,229]},{43:[1,230]},{52:[1,231]},{18:[1,232],62:$VY,63:$VZ,64:$V_},{27:[1,233]},o($V11,[2,46]),o($Ve,[2,49]),{34:$VV,57:234,65:181},{34:$VV,57:235,65:181},{34:$VV,57:236,65:181},{24:239,66:237,73:$V21,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{24:239,66:240,73:$V21,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{24:239,66:241,73:$V21,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{24:239,66:242,73:$V21,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{24:239,66:243,73:$V21,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{24:239,66:244,73:$V21,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($VF,[2,105]),o($Ve,[2,43]),o($Ve,[2,44]),o($Ve,[2,66]),{76:[1,245]},o($Ve,[2,68]),{18:[1,246]},o($Ve,[2,71]),{18:[2,72],27:$Vt,62:$Vu,63:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE},o($Ve,[2,23]),{2:$VH,22:247,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM},o($Ve,[2,26]),o($Ve,[2,27]),o($Ve,[2,28]),{34:[1,248]},{35:[1,249]},o($Ve,[2,45]),{24:250,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o([18,62,63],[2,50],{64:$V_}),o([18,63],[2,51],{62:$VY,64:$V_}),o($V$,[2,52]),o($V$,[2,54],{72:$V31,73:$V41,74:$V51,75:$V61}),{24:239,66:255,73:$V21,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($V71,[2,65]),o($V$,[2,55],{72:$V31,73:$V41,74:$V51,75:$V61}),o($V$,[2,56],{72:$V31,73:$V41,74:$V51,75:$V61}),o($V$,[2,57],{72:$V31,73:$V41,74:$V51,75:$V61}),o($V$,[2,58],{72:$V31,73:$V41,74:$V51,75:$V61}),o($V$,[2,59],{72:$V31,73:$V41,74:$V51,75:$V61}),{18:[1,256]},o($Ve,[2,69]),o($V01,[2,24]),{18:[1,257]},{24:259,53:258,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($V11,[2,47]),{24:239,66:260,73:$V21,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{24:239,66:261,73:$V21,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{24:239,66:262,73:$V21,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{24:239,66:263,73:$V21,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($V71,[2,64]),o($Ve,[2,67]),o($Ve,[2,29]),{25:[1,265],37:[1,264]},o($V01,[2,40]),o($V81,[2,60],{74:$V51,75:$V61}),o($V81,[2,61],{74:$V51,75:$V61}),o($V71,[2,62]),o($V71,[2,63]),{18:[1,266]},{24:267,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($Ve,[2,36]),o($V01,[2,39])];
    defaultActions: {[key:number]: any} = {35:[2,1]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

		return $$[$0-1]
	
break;
case 2:

		$$[$0-1].push($$[$0])
		this.$ = $$[$0-1]
	
break;
case 3:

		this.$ = [$$[$0]]
	
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 20: case 21: case 22: case 31: case 32: case 33: case 34: case 35: case 53: case 65: case 72: case 77: case 78: case 79: case 80: case 81:

		this.$ = $$[$0]
	
break;
case 13:

		this.$ = new Print( $$[$0-1])
	
break;
case 14:

		this.$ = new Declarate($$[$0-1])
	
break;
case 15:

		// DECLARE @id INT DEFAULT 1
		this.$ = new Declarate_def($$[$0-4], $$[$0-3], $$[$0-1])
	
break;
case 16:

		$$[$0-3].push(new var_list($$[$0-1], $$[$0]))
		this.$ = $$[$0-3]
	
break;
case 17:



		this.$ = [new var_list($$[$0-1], $$[$0])]
	
break;
case 18:

		this.$ = new Set($$[$0-3], $$[$0-1])
	
break;
case 19:

		this.$ = new Select($$[$0-1])
	
break;
case 23:

		this.$ = new ddl_Create_Table($$[$0-4], $$[$0-2])
	
break;
case 24:

		this.$ = $$[$0-3]
		$$[$0-3].push([$$[$0-1], $$[$0]])
	
break;
case 25:

		this.$ = []
		this.$.push([$$[$0-1], $$[$0]])
	
break;
case 26:

		this.$ = new ddl_Add($$[$0-4], $$[$0-2], $$[$0-1])
	
break;
case 27:

		this.$ = new ddl_Drop_Column($$[$0-4], $$[$0-1])
	
break;
case 28:

		this.$ = new ddl_Rename_table($$[$0-4], $$[$0-1])
	
break;
case 29:

		this.$ = new ddl_Rename_Column($$[$0-6], $$[$0-3], $$[$0-1])
	
break;
case 30:

		this.$ = new ddl_Drop_Table($$[$0-1])
	
break;
case 36:

		this.$ = new dml_Insert($$[$0-8], $$[$0-6], $$[$0-2])
	
break;
case 37: case 39:

		this.$ = $$[$0-2]
		$$[$0-2].push($$[$0])
	
break;
case 38: case 40:

		this.$ = []
		this.$.push($$[$0])
	
break;
case 41:

		this.$ = new dml_Select($$[$0-3], $$[$0-1])
	
break;
case 42:

		this.$ = new dml_Select("*", $$[$0-1])
	
break;
case 43:

		this.$ = new dml_Select_where($$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 44:

		this.$ = new dml_Select_where("*", $$[$0-3], $$[$0-1])
	
break;
case 45:

		this.$ = new dml_Update($$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 46: case 74:

		this.$ = []
		this.$.push([$$[$0-2], $$[$0]])
	
break;
case 47: case 73:

		this.$ = $$[$0-4]
		$$[$0-4].push([$$[$0-2], $$[$0]])
	
break;
case 48:

		this.$ = new dml_Truncate($$[$0-1])
	
break;
case 49:

		this.$ = new dml_Delete($$[$0-3], $$[$0-1])
	
break;
case 50: case 51: case 52: case 95: case 96:

		this.$ = new Logics($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 54: case 55: case 56: case 57: case 58: case 59: case 89: case 90: case 91: case 92: case 93: case 94:

		this.$ = new Relational($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 60: case 61: case 62: case 63: case 84: case 85: case 86: case 87:

		this.$ = new Aritmertic($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 64: case 88:

		this.$ = new Aritmertic($$[$0], "!", $$[$0])
	
break;
case 66:

		this.$ = new If($$[$0-5], $$[$0-3], null)
	
break;
case 67:

		this.$ = new If($$[$0-7], $$[$0-5], $$[$0-3])
	
break;
case 68:

		this.$ = new Case($$[$0-5], $$[$0-4], $$[$0-2], null)
	
break;
case 69:

		this.$ = new Case($$[$0-6], $$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 70:

		this.$ = new Case(null, $$[$0-4], $$[$0-2], null)
	
break;
case 71:

		this.$ = new Case(null, $$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 75:

		this.$ = new Statement($$[$0])
	
break;
case 76:

		this.$ = new While($$[$0-4], $$[$0-2])
	
break;
case 82:

		this.$ = new Group($$[$0-1])
	
break;
case 83:

		this.$ = new Variable($$[$0])
	
break;
case 97:

		this.$ = new Logics($$[$0], $$[$0-1], $$[$0])
	
break;
case 98:

		this.$ = new Primitive( $$[$0], Type_dxnry.INT)
	
break;
case 99:

		this.$ = new Primitive( $$[$0], Type_dxnry.DOUBLE)
	
break;
case 100:

		this.$ = new Primitive( $$[$0], Type_dxnry.DATE)
	
break;
case 101:

		let string_tmp = $$[$0].toString().replace('"','')
		string_tmp = string_tmp.replace('"','')
		this.$ = new Primitive( string_tmp, Type_dxnry.STRING)
	
break;
case 102: case 103:

		this.$ = new Primitive( $$[$0], Type_dxnry.BOOLEAN)
	
break;
case 104:

		this.$ = new Primitive( $$[$0], Type_dxnry.NULL)
	
break;
case 105:

		this.$ = new Cast( $$[$0-3], $$[$0-1])
	
break;
case 106:

		this.$ = Type_dxnry.INT
	
break;
case 107:

		this.$ = Type_dxnry.DOUBLE
	
break;
case 108:

		this.$ = Type_dxnry.DATE
	
break;
case 109:

		this.$ = Type_dxnry.STRING
	
break;
case 110:

		this.$ = Type_dxnry.BOOLEAN
	
break;
case 111:

		console.error('Error sintáctico: ' + yytext + ',  linea: ' + this.$.first_line + ', columna: ' + this.$.first_column)
	
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class QueryParserLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"QueryParser"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:print\b)/i,/^(?:declare\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:default\b)/i,/^(?:end\b)/i,/^(?:set\b)/i,/^(?:select\b)/i,/^(?:create\b)/i,/^(?:table\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:cast\b)/i,/^(?:as\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:when\b)/i,/^(?:case\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:while\b)/i,/^(?:(@[^@\s,;]+))/i,/^(?:(\d{4}-\d{2}-\d{2}))/i,/^(?:(\d+\.\d+))/i,/^(?:([0-9]+))/i,/^(?:("([^"\\]|\\.)*"))/i,/^(?:([a-z][a-z0-9_-]*))/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0: return 35
      break;
    case 1: return 37
      break;
    case 2: return 18
      break;
    case 3: return 25
      break;
    case 4: return 72
      break;
    case 5: return 73
      break;
    case 6: return 74
      break;
    case 7: return 55
      break;
    case 8: return 75
      break;
    case 9: return 71
      break;
    case 10: return 69
      break;
    case 11: return 67
      break;
    case 12: return 27
      break;
    case 13: return 68
      break;
    case 14: return 70
      break;
    case 15: return 62
      break;
    case 16: return 63
      break;
    case 17: return 64
      break;
    case 18: return 96
      break;
    case 19: return 97
      break;
    case 20: return 98
      break;
    case 21: return 16
      break;
    case 22: return 19
      break;
    case 23: return 100
      break;
    case 24: return 101
      break;
    case 25: return 102
      break;
    case 26: return 103
      break;
    case 27: return 104
      break;
    case 28: return 23
      break;
    case 29: return 79
      break;
    case 30: return 26
      break;
    case 31: return 28
      break;
    case 32: return 32
      break;
    case 33: return 33
      break;
    case 34: return 38
      break;
    case 35: return 39
      break;
    case 36: return 40
      break;
    case 37: return 41
      break;
    case 38: return 42
      break;
    case 39: return 43
      break;
    case 40: return 49
      break;
    case 41: return 50
      break;
    case 42: return 52
      break;
    case 43: return 54
      break;
    case 44: return 56
      break;
    case 45: return 58
      break;
    case 46: return 60
      break;
    case 47: return 61
      break;
    case 48: return 99
      break;
    case 49: return 84
      break;
    case 50: return 76
      break;
    case 51: return 77
      break;
    case 52: return 80
      break;
    case 53: return 85
      break;
    case 54: return 81
      break;
    case 55: return 87
      break;
    case 56: return 79
      break;
    case 57: return 86
      break;
    case 58: return 21
      break;
    case 59: return 94
      break;
    case 60: return 93
      break;
    case 61: return 92
      break;
    case 62: return 95
      break;
    case 63: return 34
      break;
    case 64:/* Espacios se ignoran */
      break;
    case 65:return 5;
      break;
    case 66: console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
      break;
        }
    }
}

