/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  	import Print from '../instruction/print.js'
	import Primitive from "../expression/primitives.js"
	import {Type_dxnry} from "../abstrac/Return.js"
  	import {Declarate, Declarate_def, Set, Select} from "../instruction/Declarate.js"
  	import {var_list} from "../instruction/Declarate.js"
  	import Aritmertic from "../expression/Aritmetic.js"
	import Relational from "../expression/Relational.js"
	import Logics from "../expression/Logics.js"
	import ddl_Create_Table from '../instruction/DDl/ddl_Create_Table.js'
	import ddl_Add from '../instruction/DDl/ddl_Add.js'
	import { ddl_Drop_Column, ddl_Drop_Table } from '../instruction/DDl/ddl_Drop.js'
	import ddl_Rename_table from '../instruction/DDl/ddl_Rename_table.js'
	import ddl_Rename_Column from '../instruction/DDl/ddl_Rename_column.js'
	import dml_Insert from '../instruction/DML/dml_Insert.js'
	import { dml_Select, dml_Select_where } from '../instruction/DML/dml_Select.js'
	import dml_Update from '../instruction/DML/dml_update.js'
	import dml_Truncate from '../instruction/DML/dml_Truncate.js'
	import dml_Delete from '../instruction/DML/dml_Delete.js'
	import Cast from '../expression/Cast.js'
	import Statement from '../instruction/Statement.js'
	import If from '../instruction/If.js'
	import Variable from '../expression/Variable.js'
	import Case from '../instruction/Case.js'
  	import Group from '../expression/Group.js'
    import While from '../instruction/While.js'
    import For from '../instruction/For.js'
    import Ffunction from '../instruction/Ffunction.js'
    import Param from '../expression/Param.js'
    import ReturnExpression from '../expression/ReturnExp.js'
    import CallFunction from '../instruction/CallFunction.js'
	import Procedure from '../instruction/Procedure.js'
    import CallProcedure from '../instruction/CallProcedure.js'
	import ToLower from '../expression/Lower.js'
    import TOUpper from '../expression/Upper.js'
    import Round from '../expression/Round.js'
    import Lenght from '../expression/Lenght.js'
    import Truncate from '../expression/Truncate.js'
    import TypeOf from '../expression/TypeOf.js'


import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,15],$V1=[1,18],$V2=[1,19],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,37],$V9=[1,39],$Va=[1,40],$Vb=[1,41],$Vc=[1,42],$Vd=[1,43],$Ve=[1,44],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,38],$Vk=[5,18,21,23,24,26,27,34,36,40,46,48,57,66,68,69,84,87,88,89,94,96,105],$Vl=[1,58],$Vm=[1,59],$Vn=[1,57],$Vo=[1,74],$Vp=[1,68],$Vq=[1,67],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,63],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[1,69],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,75],$VE=[1,87],$VF=[1,106],$VG=[1,103],$VH=[1,112],$VI=[1,113],$VJ=[1,107],$VK=[1,108],$VL=[1,109],$VM=[1,110],$VN=[1,111],$VO=[1,101],$VP=[1,102],$VQ=[1,104],$VR=[1,105],$VS=[22,33,35,45,63,70,71,75,76,77,78,79,80,81,82,83,85,87,88,92,93,95],$VT=[1,115],$VU=[22,33,35,45,63,64,70,71,72,75,76,77,78,79,80,81,82,83,85,87,88,92,93,95],$VV=[1,134],$VW=[1,129],$VX=[1,130],$VY=[1,131],$VZ=[1,132],$V_=[1,133],$V$=[1,138],$V01=[2,105],$V11=[1,143],$V21=[33,45],$V31=[2,90],$V41=[22,33,45,70,71,85,87,88,92,93,95],$V51=[22,33],$V61=[22,31,33,45,92,95],$V71=[1,196],$V81=[22,33,35,45,70,71,75,76,77,78,79,80,81,85,87,88,92,93,95],$V91=[22,33,35,45,70,71,75,76,77,78,79,85,87,88,92,93,95],$Va1=[1,209],$Vb1=[1,236],$Vc1=[1,252],$Vd1=[1,265],$Ve1=[88,93],$Vf1=[33,45,92],$Vg1=[1,285],$Vh1=[1,286],$Vi1=[1,287],$Vj1=[22,70,71,72],$Vk1=[33,64],$Vl1=[1,323],$Vm1=[1,344],$Vn1=[1,340],$Vo1=[1,341],$Vp1=[1,342],$Vq1=[1,343],$Vr1=[22,63,70,71,72,80,81,82,83],$Vs1=[22,70,71,72,80,81];

export class QueryParserParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new QueryParserLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print":7,"declare":8,"set":9,"select":10,"ddl":11,"dml":12,"if":13,"case":14,"while":15,"for":16,"function":17,"call_function":18,"procedure":19,"call_procedure":20,"RBREAK":21,"PUNTOCOMA":22,"RCONTINUE":23,"RRETURN":24,"expresion":25,"RPRINT":26,"RDECLARE":27,"variable_l":28,"VARIABLE_NAME":29,"data_type":30,"RDEFAULT":31,"primitivo":32,"COMMA":33,"RSET":34,"EQUAL":35,"RSELECT":36,"create":37,"alter":38,"drop":39,"RCREATE":40,"RTABLE":41,"ID":42,"PARENIZQ":43,"column_list":44,"PARENDER":45,"RALTER":46,"RADD":47,"RDROP":48,"RCOLUMN":49,"RRENAME":50,"RTO":51,"dml_insert":52,"dml_select":53,"dml_update":54,"dml_truncate":55,"dml_delete":56,"RINSERT":57,"RINTO":58,"id_list":59,"RVALUES":60,"values_list":61,"RFROM":62,"BY":63,"RWHERE":64,"where_conds":65,"RUPDATE":66,"set_columns":67,"RTRUNCATE":68,"RDELETE":69,"AND":70,"OR":71,"NOT":72,"condition":73,"arit_cond":74,"DIFERENT":75,"MINOR":76,"MINOREQUAL":77,"GREATER":78,"GREATEREQUAL":79,"PLUS":80,"LESS":81,"DIVIDED":82,"MODUL":83,"RIF":84,"RTHEN":85,"newStatement":86,"REND":87,"RELSE":88,"RCASE":89,"case_list":90,"a_s":91,"RAS":92,"RWHEN":93,"RWHILE":94,"RBEGIN":95,"RFOR":96,"RIN":97,"ENTERO":98,"RANGO":99,"RFUNCTION":100,"params":101,"RRETURNS":102,"args":103,"RPROCEDURE":104,"RCALL":105,"aritmetica":106,"relacional":107,"logica":108,"cast":109,"natives":110,"DECIMAL":111,"DATE":112,"CADENA":113,"RTRUE":114,"RFALSE":115,"RNULL":116,"RCAST":117,"RLOWER":118,"RUPPER":119,"RROUND":120,"RLENGTH":121,"RTYPEOF":122,"RINT":123,"RDOUBLE":124,"RDATE":125,"RVARCHAR":126,"RBOOLEAN":127,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",18:"call_function",21:"RBREAK",22:"PUNTOCOMA",23:"RCONTINUE",24:"RRETURN",26:"RPRINT",27:"RDECLARE",29:"VARIABLE_NAME",31:"RDEFAULT",33:"COMMA",34:"RSET",35:"EQUAL",36:"RSELECT",40:"RCREATE",41:"RTABLE",42:"ID",43:"PARENIZQ",45:"PARENDER",46:"RALTER",47:"RADD",48:"RDROP",49:"RCOLUMN",50:"RRENAME",51:"RTO",57:"RINSERT",58:"RINTO",60:"RVALUES",62:"RFROM",63:"BY",64:"RWHERE",66:"RUPDATE",68:"RTRUNCATE",69:"RDELETE",70:"AND",71:"OR",72:"NOT",75:"DIFERENT",76:"MINOR",77:"MINOREQUAL",78:"GREATER",79:"GREATEREQUAL",80:"PLUS",81:"LESS",82:"DIVIDED",83:"MODUL",84:"RIF",85:"RTHEN",87:"REND",88:"RELSE",89:"RCASE",92:"RAS",93:"RWHEN",94:"RWHILE",95:"RBEGIN",96:"RFOR",97:"RIN",98:"ENTERO",99:"RANGO",100:"RFUNCTION",102:"RRETURNS",104:"RPROCEDURE",105:"RCALL",111:"DECIMAL",112:"DATE",113:"CADENA",114:"RTRUE",115:"RFALSE",116:"RNULL",117:"RCAST",118:"RLOWER",119:"RUPPER",120:"RROUND",121:"RLENGTH",122:"RTYPEOF",123:"RINT",124:"RDOUBLE",125:"RDATE",126:"RVARCHAR",127:"RBOOLEAN"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[7,3],[8,3],[8,6],[28,4],[28,2],[9,5],[10,3],[11,1],[11,1],[11,1],[37,7],[44,4],[44,2],[38,7],[38,7],[38,7],[38,9],[39,4],[12,1],[12,1],[12,1],[12,1],[12,1],[52,11],[61,3],[61,1],[53,5],[53,5],[53,7],[53,7],[54,7],[67,3],[67,5],[55,4],[56,6],[65,3],[65,3],[65,3],[65,1],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[74,3],[74,3],[74,3],[74,3],[74,2],[74,3],[74,1],[13,7],[13,9],[14,7],[14,8],[14,6],[14,7],[91,2],[90,5],[90,4],[86,1],[15,6],[16,10],[17,12],[17,12],[103,3],[103,1],[103,0],[19,9],[20,6],[101,4],[101,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,3],[25,1],[25,4],[59,3],[59,1],[106,3],[106,3],[106,3],[106,3],[106,3],[106,2],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[108,3],[108,3],[108,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[109,6],[110,4],[110,4],[110,6],[110,4],[110,4],[110,6],[110,4],[110,4],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:$V1,23:$V2,24:$V3,26:$V4,27:$V5,34:$V6,36:$V7,37:25,38:26,39:27,40:$V8,46:$V9,48:$Va,52:28,53:29,54:30,55:31,56:32,57:$Vb,66:$Vc,68:$Vd,69:$Ve,84:$Vf,89:$Vg,94:$Vh,96:$Vi,105:$Vj},{1:[3]},{5:[1,45],6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:$V1,23:$V2,24:$V3,26:$V4,27:$V5,34:$V6,36:$V7,37:25,38:26,39:27,40:$V8,46:$V9,48:$Va,52:28,53:29,54:30,55:31,56:32,57:$Vb,66:$Vc,68:$Vd,69:$Ve,84:$Vf,89:$Vg,94:$Vh,96:$Vi,105:$Vj},o($Vk,[2,3]),o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),{22:[1,47]},{22:[1,48]},{22:[1,49],25:50,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:76,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{28:77,29:[1,78]},{29:[1,79]},{25:80,29:$Vl,32:51,42:[1,83],43:$Vn,59:81,63:[1,82],68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},o($Vk,[2,29]),o($Vk,[2,30]),o($Vk,[2,31]),o($Vk,[2,40]),o($Vk,[2,41]),o($Vk,[2,42]),o($Vk,[2,43]),o($Vk,[2,44]),{25:84,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:85,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,90:86,93:$VE,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:88,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{29:[1,89]},{41:[1,92],100:[1,90],104:[1,91]},{42:[1,93]},{41:[1,94]},{41:[1,95]},{58:[1,96]},{42:[1,97]},{41:[1,98]},{62:[1,99]},{1:[2,1]},o($Vk,[2,2]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),{22:[1,100],35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR},o($VS,[2,95]),o($VS,[2,96]),o($VS,[2,97]),o($VS,[2,98]),o($VS,[2,99]),o($VS,[2,100]),{25:114,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},o($VS,[2,102]),{43:$VT},o($VU,[2,121]),o($VU,[2,122]),o($VU,[2,123]),o($VU,[2,124]),o($VU,[2,125]),o($VU,[2,126]),o($VU,[2,127]),{25:116,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:117,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{43:[1,118]},{43:[1,119]},{43:[1,120]},{43:[1,121]},{43:[1,122]},{43:[1,123]},{43:[1,124]},{22:[1,125],35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR},{22:[1,126],33:[1,127]},{2:$VV,30:128,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{35:[1,135]},{22:[1,136],35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR},{33:$V$,62:[1,137]},{62:[1,139]},o([33,62],$V01,{43:$VT}),{35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,85:[1,140]},{35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,90:141,93:$VE},{88:[1,142],93:$V11},{25:144,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,95:[1,145]},{97:[1,146]},{42:[1,147]},{42:[1,148]},{42:[1,149]},{43:[1,150]},{42:[1,151]},{42:[1,152]},{42:[1,153]},{34:[1,154]},{42:[1,155]},{42:[1,156]},o($Vk,[2,21]),{25:157,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:158,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:159,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:160,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:161,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:162,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:163,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:164,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:165,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:166,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:167,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:168,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:169,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{35:$VF,45:[1,170],63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR},o($V21,$V31,{32:51,106:52,107:53,108:54,109:55,110:56,103:171,25:172,29:$Vl,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD}),o($VS,[2,111]),o($V41,[2,120],{35:$VF,63:$VG,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR}),{25:173,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:174,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:175,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:176,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:177,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:178,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:179,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},o($Vk,[2,22]),o($Vk,[2,23]),{29:[1,180]},o($V51,[2,26],{31:[1,181]}),o($V61,[2,137]),o($V61,[2,138]),o($V61,[2,139]),o($V61,[2,140]),o($V61,[2,141]),o($V61,[2,142]),{25:182,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},o($Vk,[2,28]),{42:[1,183]},{42:[1,184]},{42:[1,185]},{4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:$V1,23:$V2,24:$V3,26:$V4,27:$V5,34:$V6,36:$V7,37:25,38:26,39:27,40:$V8,46:$V9,48:$Va,52:28,53:29,54:30,55:31,56:32,57:$Vb,66:$Vc,68:$Vd,69:$Ve,84:$Vf,86:186,89:$Vg,94:$Vh,96:$Vi,105:$Vj},{88:[1,188],93:$V11},{25:189,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{25:190,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,85:[1,191]},{4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:$V1,23:$V2,24:$V3,26:$V4,27:$V5,34:$V6,36:$V7,37:25,38:26,39:27,40:$V8,46:$V9,48:$Va,52:28,53:29,54:30,55:31,56:32,57:$Vb,66:$Vc,68:$Vd,69:$Ve,84:$Vf,86:192,89:$Vg,94:$Vh,96:$Vi,105:$Vj},{98:[1,193]},{43:[1,194]},{29:$V71,101:195},{43:[1,197]},o($V21,$V31,{32:51,106:52,107:53,108:54,109:55,110:56,25:172,103:198,29:$Vl,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD}),{47:[1,199],48:[1,200],50:[1,201]},{22:[1,202]},{43:[1,203]},{42:[1,205],67:204},{22:[1,206]},{64:[1,207]},o($V81,[2,106],{63:$VG,82:$VQ,83:$VR}),o($V81,[2,107],{63:$VG,82:$VQ,83:$VR}),o($VS,[2,108]),o($VS,[2,109]),o($VS,[2,110]),o($V91,[2,112],{63:$VG,80:$VO,81:$VP,82:$VQ,83:$VR}),o($V91,[2,113],{63:$VG,80:$VO,81:$VP,82:$VQ,83:$VR}),o($V91,[2,114],{63:$VG,80:$VO,81:$VP,82:$VQ,83:$VR}),o($V91,[2,115],{63:$VG,80:$VO,81:$VP,82:$VQ,83:$VR}),o($V91,[2,116],{63:$VG,80:$VO,81:$VP,82:$VQ,83:$VR}),o($V91,[2,117],{63:$VG,80:$VO,81:$VP,82:$VQ,83:$VR}),o($V41,[2,118],{35:$VF,63:$VG,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR}),o([22,33,45,71,85,87,88,92,93,95],[2,119],{35:$VF,63:$VG,70:$VH,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR}),o($VS,[2,101]),{33:$Va1,45:[1,208]},o($V21,[2,89],{35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR}),{35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,92:[1,210]},{35:$VF,45:[1,211],63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR},{35:$VF,45:[1,212],63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR},{33:[1,213],35:$VF,45:[1,214],63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR},{35:$VF,45:[1,215],63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR},{33:[1,216],35:$VF,45:[1,217],63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR},{35:$VF,45:[1,218],63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR},{2:$VV,30:219,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{32:220,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},{22:[1,221],35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR},{22:[1,222],64:[1,223]},o([33,45,62],[2,104]),{22:[1,224],64:[1,225]},{87:[1,226],88:[1,227]},o([87,88],[2,83],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:16,20:17,37:25,38:26,39:27,52:28,53:29,54:30,55:31,56:32,6:46,18:$V0,21:$V1,23:$V2,24:$V3,26:$V4,27:$V5,34:$V6,36:$V7,40:$V8,46:$V9,48:$Va,57:$Vb,66:$Vc,68:$Vd,69:$Ve,84:$Vf,89:$Vg,94:$Vh,96:$Vi,105:$Vj}),{25:228,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,87:[1,229]},{35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,85:[1,230]},{25:231,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{87:[1,232]},{99:[1,233]},{29:$V71,101:234},{33:$Vb1,92:[1,235]},{2:$VV,30:237,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{42:[1,239],44:238},{33:$Va1,45:[1,240]},{42:[1,241]},{49:[1,242]},{49:[1,244],51:[1,243]},o($Vk,[2,39]),{42:[1,246],59:245},{33:[1,248],64:[1,247]},{35:[1,249]},o($Vk,[2,55]),{42:$Vc1,65:250,73:251},o($VS,[2,103]),{25:253,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{2:$VV,30:254,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},o($VS,[2,129]),o($VS,[2,130]),{98:[1,255]},o($VS,[2,132]),o($VS,[2,133]),{98:[1,256]},o($VS,[2,135]),o($VS,[2,136]),o($V51,[2,25]),{22:[1,257]},o($Vk,[2,27]),o($Vk,[2,48]),{42:$Vc1,65:258,73:251},o($Vk,[2,49]),{42:$Vc1,65:259,73:251},{84:[1,260]},{4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:$V1,23:$V2,24:$V3,26:$V4,27:$V5,34:$V6,36:$V7,37:25,38:26,39:27,40:$V8,46:$V9,48:$Va,52:28,53:29,54:30,55:31,56:32,57:$Vb,66:$Vc,68:$Vd,69:$Ve,84:$Vf,86:261,89:$Vg,94:$Vh,96:$Vi,105:$Vj},{35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,87:[1,262]},{22:[1,263],91:264,92:$Vd1},{25:266,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},o($Ve1,[2,82],{35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR}),{22:[1,267]},{98:[1,268]},{33:$Vb1,45:[1,269]},{95:[1,270]},{29:[1,271]},o($Vf1,[2,94]),{33:[1,273],45:[1,272]},{2:$VV,30:274,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{22:[1,275]},{2:$VV,30:276,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{42:[1,277]},{42:[1,278]},{42:[1,279]},{33:$V$,45:[1,280]},o($V21,$V01),{42:$Vc1,65:281,73:251},{42:[1,282]},{32:283,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},{22:[1,284],70:$Vg1,71:$Vh1,72:$Vi1},o($Vj1,[2,60]),{35:[1,288],75:[1,289],76:[1,290],77:[1,291],78:[1,292],79:[1,293]},o($V21,[2,88],{35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR}),{45:[1,294]},{45:[1,295]},{45:[1,296]},o($Vk,[2,24]),{22:[1,297],70:$Vg1,71:$Vh1,72:$Vi1},{22:[1,298],70:$Vg1,71:$Vh1,72:$Vi1},{22:[1,299]},{87:[1,300]},{22:[1,301],91:302,92:$Vd1},o($Vk,[2,78]),{22:[1,303]},{25:304,29:$Vl,32:51,42:$Vm,43:$Vn,68:$Vo,72:$Vp,81:$Vq,98:$Vr,106:52,107:53,108:54,109:55,110:56,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},o($Ve1,[2,81],{35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR}),o($Vk,[2,84]),{95:[1,305]},{24:[1,306],102:[1,307]},{4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:$V1,23:$V2,24:$V3,26:$V4,27:$V5,34:$V6,36:$V7,37:25,38:26,39:27,40:$V8,46:$V9,48:$Va,52:28,53:29,54:30,55:31,56:32,57:$Vb,66:$Vc,68:$Vd,69:$Ve,84:$Vf,86:308,89:$Vg,94:$Vh,96:$Vi,105:$Vj},{2:$VV,30:309,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{22:[1,310]},{42:[1,311]},o($V21,[2,34]),o($Vk,[2,92]),{22:[1,312]},{22:[1,313]},{22:[1,314]},{51:[1,315]},{60:[1,316]},{22:[1,317],70:$Vg1,71:$Vh1,72:$Vi1},{35:[1,318]},o($Vk1,[2,53]),o($Vk,[2,56]),{42:$Vc1,65:319,73:251},{42:$Vc1,65:320,73:251},{42:$Vc1,65:321,73:251},{32:324,74:322,81:$Vl1,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},{32:324,74:325,81:$Vl1,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},{32:324,74:326,81:$Vl1,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},{32:324,74:327,81:$Vl1,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},{32:324,74:328,81:$Vl1,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},{32:324,74:329,81:$Vl1,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},o($VS,[2,128]),o($VS,[2,131]),o($VS,[2,134]),o($Vk,[2,50]),o($Vk,[2,51]),o($Vk,[2,74]),{84:[1,330]},o($Vk,[2,76]),{22:[1,331]},o($Vk,[2,79]),{22:[2,80],35:$VF,63:$VG,70:$VH,71:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR},{4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:$V1,23:$V2,24:$V3,26:$V4,27:$V5,34:$V6,36:$V7,37:25,38:26,39:27,40:$V8,46:$V9,48:$Va,52:28,53:29,54:30,55:31,56:32,57:$Vb,66:$Vc,68:$Vd,69:$Ve,84:$Vf,86:332,89:$Vg,94:$Vh,96:$Vi,105:$Vj},{2:$VV,30:333,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{2:$VV,30:334,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{87:[1,335]},o($Vf1,[2,93]),o($Vk,[2,32]),{2:$VV,30:336,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},o($Vk,[2,35]),o($Vk,[2,36]),o($Vk,[2,37]),{42:[1,337]},{43:[1,338]},o($Vk,[2,52]),{32:339,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},o([22,70,71],[2,57],{72:$Vi1}),o([22,71],[2,58],{70:$Vg1,72:$Vi1}),o($Vj1,[2,59]),o($Vj1,[2,61],{63:$Vm1,80:$Vn1,81:$Vo1,82:$Vp1,83:$Vq1}),{32:324,74:345,81:$Vl1,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},o($Vr1,[2,73]),o($Vj1,[2,62],{63:$Vm1,80:$Vn1,81:$Vo1,82:$Vp1,83:$Vq1}),o($Vj1,[2,63],{63:$Vm1,80:$Vn1,81:$Vo1,82:$Vp1,83:$Vq1}),o($Vj1,[2,64],{63:$Vm1,80:$Vn1,81:$Vo1,82:$Vp1,83:$Vq1}),o($Vj1,[2,65],{63:$Vm1,80:$Vn1,81:$Vo1,82:$Vp1,83:$Vq1}),o($Vj1,[2,66],{63:$Vm1,80:$Vn1,81:$Vo1,82:$Vp1,83:$Vq1}),{22:[1,346]},o($Vk,[2,77]),{87:[1,347]},{95:[1,348]},{95:[1,349]},{22:[1,350]},o($V21,[2,33]),{22:[1,351]},{32:353,61:352,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},o($Vk1,[2,54]),{32:324,74:354,81:$Vl1,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},{32:324,74:355,81:$Vl1,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},{32:324,74:356,81:$Vl1,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},{32:324,74:357,81:$Vl1,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},{32:324,74:358,81:$Vl1,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},o($Vr1,[2,71]),o($Vk,[2,75]),{22:[1,359]},{4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:$V1,23:$V2,24:$V3,26:$V4,27:$V5,34:$V6,36:$V7,37:25,38:26,39:27,40:$V8,46:$V9,48:$Va,52:28,53:29,54:30,55:31,56:32,57:$Vb,66:$Vc,68:$Vd,69:$Ve,84:$Vf,86:360,89:$Vg,94:$Vh,96:$Vi,105:$Vj},{4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:$V1,23:$V2,24:$V3,26:$V4,27:$V5,34:$V6,36:$V7,37:25,38:26,39:27,40:$V8,46:$V9,48:$Va,52:28,53:29,54:30,55:31,56:32,57:$Vb,66:$Vc,68:$Vd,69:$Ve,84:$Vf,86:361,89:$Vg,94:$Vh,96:$Vi,105:$Vj},o($Vk,[2,91]),o($Vk,[2,38]),{33:[1,363],45:[1,362]},o($V21,[2,47]),o($Vs1,[2,67],{63:$Vm1,82:$Vp1,83:$Vq1}),o($Vs1,[2,68],{63:$Vm1,82:$Vp1,83:$Vq1}),o($Vr1,[2,69]),o($Vr1,[2,70]),o($Vr1,[2,72]),o($Vk,[2,85]),{87:[1,364]},{87:[1,365]},{22:[1,366]},{32:367,98:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},{22:[1,368]},{22:[1,369]},o($Vk,[2,45]),o($V21,[2,46]),o($Vk,[2,86]),o($Vk,[2,87])];
    defaultActions: {[key:number]: any} = {45:[2,1]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

		return $$[$0-1]
	
break;
case 2:

		$$[$0-1].push($$[$0])
		this.$ = $$[$0-1]
	
break;
case 3: case 89:

		this.$ = [$$[$0]]
	
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 29: case 30: case 31: case 40: case 41: case 42: case 43: case 44: case 60: case 73: case 80: case 95: case 96: case 97: case 98: case 99: case 100:

		this.$ = $$[$0]
	
break;
case 18:

		this.$ = new Primitive( null, Type_dxnry.BREAK)
	
break;
case 19:

		this.$ = new Primitive( null, Type_dxnry.CONTINUE)
	
break;
case 20:
 
		this.$ = new ReturnExpression( null, Type_dxnry.RETURN); 
	
break;
case 21:
 
		this.$ = new ReturnExpression( $$[$0-1], Type_dxnry.RETURN); 
	
break;
case 22:

		this.$ = new Print( $$[$0-1])
	
break;
case 23:

		this.$ = new Declarate($$[$0-1])
	
break;
case 24:

		// DECLARE @id INT DEFAULT 1
		this.$ = new Declarate_def($$[$0-4], $$[$0-3], $$[$0-1])
	
break;
case 25:

		$$[$0-3].push(new var_list($$[$0-1], $$[$0]))
		this.$ = $$[$0-3]
	
break;
case 26:



		this.$ = [new var_list($$[$0-1], $$[$0])]
	
break;
case 27:

		this.$ = new Set($$[$0-3], $$[$0-1])
	
break;
case 28:

		this.$ = new Select($$[$0-1])
	
break;
case 32:

		this.$ = new ddl_Create_Table($$[$0-4], $$[$0-2])
	
break;
case 33:

		this.$ = $$[$0-3]
		$$[$0-3].push([$$[$0-1], $$[$0]])
	
break;
case 34:

		this.$ = []
		this.$.push([$$[$0-1], $$[$0]])
	
break;
case 35:

		this.$ = new ddl_Add($$[$0-4], $$[$0-2], $$[$0-1])
	
break;
case 36:

		this.$ = new ddl_Drop_Column($$[$0-4], $$[$0-1])
	
break;
case 37:

		this.$ = new ddl_Rename_table($$[$0-4], $$[$0-1])
	
break;
case 38:

		this.$ = new ddl_Rename_Column($$[$0-6], $$[$0-3], $$[$0-1])
	
break;
case 39:

		this.$ = new ddl_Drop_Table($$[$0-1])
	
break;
case 45:

		this.$ = new dml_Insert($$[$0-8], $$[$0-6], $$[$0-2])
	
break;
case 46:

		this.$ = $$[$0-2]
		$$[$0-2].push($$[$0])
	
break;
case 47: case 105:

		this.$ = []
		this.$.push($$[$0])
	
break;
case 48:

		this.$ = new dml_Select($$[$0-3], $$[$0-1])
	
break;
case 49:

		this.$ = new dml_Select("*", $$[$0-1])
	
break;
case 50:

		this.$ = new dml_Select_where($$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 51:

		this.$ = new dml_Select_where("*", $$[$0-3], $$[$0-1])
	
break;
case 52:

		this.$ = new dml_Update($$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 53: case 82:

		this.$ = []
		this.$.push([$$[$0-2], $$[$0]])
	
break;
case 54: case 81:

		this.$ = $$[$0-4]
		$$[$0-4].push([$$[$0-2], $$[$0]])
	
break;
case 55:

		this.$ = new dml_Truncate($$[$0-1])
	
break;
case 56:

		this.$ = new dml_Delete($$[$0-3], $$[$0-1])
	
break;
case 57: case 58: case 59: case 118: case 119:

		this.$ = new Logics($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 61: case 62: case 63: case 64: case 65: case 66: case 112: case 113: case 114: case 115: case 116: case 117:

		this.$ = new Relational($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 67: case 68: case 69: case 70: case 72: case 106: case 107: case 108: case 109: case 110:

		this.$ = new Aritmertic($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 71: case 111:

		this.$ = new Aritmertic($$[$0], "!", $$[$0])
	
break;
case 74:

		this.$ = new If($$[$0-5], $$[$0-3], null)
	
break;
case 75:

		this.$ = new If($$[$0-7], $$[$0-5], $$[$0-3])
	
break;
case 76:

		this.$ = new Case($$[$0-5], $$[$0-4], $$[$0-2], null)
	
break;
case 77:

		this.$ = new Case($$[$0-6], $$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 78:

		this.$ = new Case(null, $$[$0-4], $$[$0-2], null)
	
break;
case 79:

		this.$ = new Case(null, $$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 83:

		this.$ = new Statement($$[$0])
	
break;
case 84:

		this.$ = new While($$[$0-4], $$[$0-2])
	
break;
case 85:

		this.$ = new For(new Variable($$[$0-8]), parseInt($$[$0-6]), parseInt($$[$0-4]), $$[$0-2])
	
break;
case 86: case 87:

		this.$ = new Ffunction($$[$0-9], $$[$0-7], $$[$0-4], $$[$0-2])
	
break;
case 88: case 104:

		$$[$0-2].push($$[$0])
		this.$ = $$[$0-2]
	
break;
case 90:

		this.$ = []
	
break;
case 91:

		this.$ = new Procedure($$[$0-6], $$[$0-5], $$[$0-2])
	
break;
case 92:

		this.$ = new CallProcedure($$[$0-4], $$[$0-2])
	
break;
case 93:

		$$[$0-3].push( new Param($$[$0-1], $$[$0]));
        this.$ = $$[$0-3];
	
break;
case 94:

		let param = new Param($$[$0-1], $$[$0])
		let params = [];
		params.push(param);
		this.$ = params;
	
break;
case 101:

		this.$ = new Group($$[$0-1])
	
break;
case 102:

		this.$ = new Variable($$[$0])
	
break;
case 103:

		this.$ = new CallFunction($$[$0-3], $$[$0-1])
	
break;
case 120:

		this.$ = new Logics($$[$0], $$[$0-1], $$[$0])
	
break;
case 121:

		this.$ = new Primitive( $$[$0], Type_dxnry.INT)
	
break;
case 122:

		this.$ = new Primitive( $$[$0], Type_dxnry.DOUBLE)
	
break;
case 123:

		this.$ = new Primitive( $$[$0], Type_dxnry.DATE)
	
break;
case 124:

		let string_tmp = $$[$0].toString().replace('"','')
		string_tmp = string_tmp.replace('"','')
		this.$ = new Primitive( string_tmp, Type_dxnry.STRING)
	
break;
case 125: case 126:

		this.$ = new Primitive( $$[$0], Type_dxnry.BOOLEAN)
	
break;
case 127:

		this.$ = new Primitive( $$[$0], Type_dxnry.NULL)
	
break;
case 128:

		this.$ = new Cast( $$[$0-3], $$[$0-1])
	
break;
case 129:

		this.$ = new ToLower($$[$0-1])
	
break;
case 130:

		this.$ = new TOUpper($$[$0-1])
	
break;
case 131:

		this.$ = new Round($$[$0-3], new Primitive( $$[$0-1], Type_dxnry.INT))
	
break;
case 132:

		this.$ = new Round($$[$0-1], null)
	
break;
case 133:

		this.$ = new Lenght($$[$0-1])
	
break;
case 134:

		this.$ = new Truncate($$[$0-3], new Primitive( $$[$0-1], Type_dxnry.INT))
	
break;
case 135:

		this.$ = new Truncate($$[$0-1], null)
	
break;
case 136:

		this.$ = new TypeOf($$[$0-1])
	
break;
case 137:

		this.$ = Type_dxnry.INT
	
break;
case 138:

		this.$ = Type_dxnry.DOUBLE
	
break;
case 139:

		this.$ = Type_dxnry.DATE
	
break;
case 140:

		this.$ = Type_dxnry.STRING
	
break;
case 141:

		this.$ = Type_dxnry.BOOLEAN
	
break;
case 142:

		console.error('Error sintáctico: ' + yytext + ',  linea: ' + this.$.first_line + ', columna: ' + this.$.first_column)
	
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class QueryParserLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"QueryParser"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:--.*)/i,/^(?:\/\*[\s\S]*?\*\/)/i,/^(?:\*)/i,/^(?:\.\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:print\b)/i,/^(?:declare\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:default\b)/i,/^(?:end\b)/i,/^(?:set\b)/i,/^(?:select\b)/i,/^(?:create\b)/i,/^(?:table\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:cast\b)/i,/^(?:as\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:when\b)/i,/^(?:case\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:returns\b)/i,/^(?:procedure\b)/i,/^(?:call\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:truncate\b)/i,/^(?:typeof\b)/i,/^(?:(@[^@\s,;()-]+))/i,/^(?:(\d{4}-\d{2}-\d{2}))/i,/^(?:(\d+\.\d+))/i,/^(?:([0-9]+))/i,/^(?:("([^"\\]|\\.)*"))/i,/^(?:([a-z_][a-z0-9_]*))/i,/^(?:[ \s\r\n\t])/i,/^(?:{coment_line})/i,/^(?:{coment_multiline})/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0: /* Comentarios de linea */ 
      break;
    case 1: /* Comentarios multilinea */ 
      break;
    case 2: return 63
      break;
    case 3: return 99
      break;
    case 4: return 43
      break;
    case 5: return 45
      break;
    case 6: return 22
      break;
    case 7: return 33
      break;
    case 8: return 80
      break;
    case 9: return 81
      break;
    case 10: return 82
      break;
    case 11: return 83
      break;
    case 12: return 79
      break;
    case 13: return 77
      break;
    case 14: return 75
      break;
    case 15: return 35
      break;
    case 16: return 76
      break;
    case 17: return 78
      break;
    case 18: return 70
      break;
    case 19: return 71
      break;
    case 20: return 72
      break;
    case 21: return 114
      break;
    case 22: return 115
      break;
    case 23: return 116
      break;
    case 24: return 26
      break;
    case 25: return 27
      break;
    case 26: return 123
      break;
    case 27: return 124
      break;
    case 28: return 125
      break;
    case 29: return 126
      break;
    case 30: return 127
      break;
    case 31: return 31
      break;
    case 32: return 87
      break;
    case 33: return 34
      break;
    case 34: return 36
      break;
    case 35: return 40
      break;
    case 36: return 41
      break;
    case 37: return 46
      break;
    case 38: return 47
      break;
    case 39: return 48
      break;
    case 40: return 49
      break;
    case 41: return 50
      break;
    case 42: return 51
      break;
    case 43: return 57
      break;
    case 44: return 58
      break;
    case 45: return 60
      break;
    case 46: return 62
      break;
    case 47: return 64
      break;
    case 48: return 66
      break;
    case 49: return 68
      break;
    case 50: return 69
      break;
    case 51: return 117
      break;
    case 52: return 92
      break;
    case 53: return 84
      break;
    case 54: return 85
      break;
    case 55: return 88
      break;
    case 56: return 93
      break;
    case 57: return 89
      break;
    case 58: return 95
      break;
    case 59: return 87
      break;
    case 60: return 94
      break;
    case 61: return 96
      break;
    case 62: return 97
      break;
    case 63: return 21
      break;
    case 64: return 23
      break;
    case 65: return 100
      break;
    case 66: return 24
      break;
    case 67: return 102
      break;
    case 68: return 104
      break;
    case 69: return 105
      break;
    case 70: return 118
      break;
    case 71: return 119
      break;
    case 72: return 120
      break;
    case 73: return 121
      break;
    case 74: return 68
      break;
    case 75: return 122
      break;
    case 76: return 29
      break;
    case 77: return 112
      break;
    case 78: return 111
      break;
    case 79: return 98
      break;
    case 80: return 113
      break;
    case 81: return 42
      break;
    case 82:/* Espacios se ignoran */
      break;
    case 83:/* Comentarios de linea se ignoran */
      break;
    case 84:/* Comentarios multilinea se ignoran */
      break;
    case 85:return 5;
      break;
    case 86: console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
      break;
        }
    }
}

