/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  	import Print from '../instruction/print.js'
	import Primitive from "../expression/primitives.js"
	import {Type_dxnry} from "../abstrac/Return.js"
  	import {Declarate, Declarate_def, Set, Select} from "../instruction/Declarate.js"
  	import {var_list} from "../instruction/Declarate.js"
  	import Aritmertic from "../expression/Aritmetic.js"
	import Relational from "../expression/Relational.js"
	import Logics from "../expression/Logics.js"
	import ddl_Create_Table from '../instruction/DDl/ddl_Create_Table.js'
	import ddl_Add from '../instruction/DDl/ddl_Add.js'
	import { ddl_Drop_Column, ddl_Drop_Table } from '../instruction/DDl/ddl_Drop.js'
	import ddl_Rename_table from '../instruction/DDl/ddl_Rename_table.js'
	import ddl_Rename_Column from '../instruction/DDl/ddl_Rename_column.js'
	import dml_Insert from '../instruction/DML/dml_Insert.js'
	import { dml_Select, dml_Select_where } from '../instruction/DML/dml_Select.js'
	import dml_Update from '../instruction/DML/dml_update.js'
	import dml_Truncate from '../instruction/DML/dml_Truncate.js'
	import dml_Delete from '../instruction/DML/dml_Delete.js'
	import Cast from '../expression/Cast.js'
	import Statement from '../instruction/Statement.js'
	import If from '../instruction/If.js'
	import Variable from '../expression/Variable.js'
	import Case from '../instruction/Case.js'
  	import Group from '../expression/Group.js'
    import While from '../instruction/While.js'
    import For from '../instruction/For.js'



import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,14],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,35],$Va=[1,36],$Vb=[1,37],$Vc=[1,38],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[5,17,19,20,22,29,31,35,41,43,52,61,63,64,79,82,83,84,89,91],$Vi=[1,50],$Vj=[1,49],$Vk=[1,59],$Vl=[1,58],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,60],$Vu=[1,67],$Vv=[1,71],$Vw=[1,86],$Vx=[1,92],$Vy=[1,93],$Vz=[1,87],$VA=[1,88],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[18,30,40,65,66,70,71,72,73,74,75,76,77,78,80,82,83,87,88,90],$VJ=[18,28,30,40,59,65,66,67,70,71,72,73,74,75,76,77,78,80,82,83,87,88,90],$VK=[1,106],$VL=[1,101],$VM=[1,102],$VN=[1,103],$VO=[1,104],$VP=[1,105],$VQ=[1,110],$VR=[28,40,57],$VS=[1,115],$VT=[18,40,65,66,80,82,83,87,88,90],$VU=[18,28],$VV=[18,26,28,40],$VW=[18,30,40,65,66,70,71,72,73,74,75,76,80,82,83,87,88,90],$VX=[18,30,40,65,66,70,71,72,73,74,80,82,83,87,88,90],$VY=[1,192],$VZ=[1,202],$V_=[83,88],$V$=[1,218],$V01=[1,219],$V11=[1,220],$V21=[18,65,66,67],$V31=[28,40],$V41=[28,59],$V51=[1,250],$V61=[1,264],$V71=[1,265],$V81=[1,266],$V91=[1,267],$Va1=[18,65,66,67,75,76,77,78],$Vb1=[18,65,66,67,75,76];

export class QueryParserParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new QueryParserLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print":7,"declare":8,"set":9,"select":10,"ddl":11,"dml":12,"if":13,"case":14,"while":15,"for":16,"RBREAK":17,"PUNTOCOMA":18,"RCONTINUE":19,"RPRINT":20,"expresion":21,"RDECLARE":22,"variable_l":23,"VARIABLE_NAME":24,"data_type":25,"RDEFAULT":26,"primitivo":27,"COMMA":28,"RSET":29,"EQUAL":30,"RSELECT":31,"create":32,"alter":33,"drop":34,"RCREATE":35,"RTABLE":36,"ID":37,"PARENIZQ":38,"column_list":39,"PARENDER":40,"RALTER":41,"RADD":42,"RDROP":43,"RCOLUMN":44,"RRENAME":45,"RTO":46,"dml_insert":47,"dml_select":48,"dml_update":49,"dml_truncate":50,"dml_delete":51,"RINSERT":52,"RINTO":53,"id_list":54,"RVALUES":55,"values_list":56,"RFROM":57,"BY":58,"RWHERE":59,"where_conds":60,"RUPDATE":61,"set_columns":62,"RTRUNCATE":63,"RDELETE":64,"AND":65,"OR":66,"NOT":67,"condition":68,"arit_cond":69,"DIFERENT":70,"MINOR":71,"MINOREQUAL":72,"GREATER":73,"GREATEREQUAL":74,"PLUS":75,"LESS":76,"DIVIDED":77,"MODUL":78,"RIF":79,"RTHEN":80,"newStatement":81,"REND":82,"RELSE":83,"RCASE":84,"case_list":85,"a_s":86,"RAS":87,"RWHEN":88,"RWHILE":89,"RBEGIN":90,"RFOR":91,"RIN":92,"ENTERO":93,"RANGO":94,"aritmetica":95,"relacional":96,"logica":97,"cast":98,"DECIMAL":99,"DATE":100,"CADENA":101,"RTRUE":102,"RFALSE":103,"RNULL":104,"RCAST":105,"RINT":106,"RDOUBLE":107,"RDATE":108,"RVARCHAR":109,"RBOOLEAN":110,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",17:"RBREAK",18:"PUNTOCOMA",19:"RCONTINUE",20:"RPRINT",22:"RDECLARE",24:"VARIABLE_NAME",26:"RDEFAULT",28:"COMMA",29:"RSET",30:"EQUAL",31:"RSELECT",35:"RCREATE",36:"RTABLE",37:"ID",38:"PARENIZQ",40:"PARENDER",41:"RALTER",42:"RADD",43:"RDROP",44:"RCOLUMN",45:"RRENAME",46:"RTO",52:"RINSERT",53:"RINTO",55:"RVALUES",57:"RFROM",58:"BY",59:"RWHERE",61:"RUPDATE",63:"RTRUNCATE",64:"RDELETE",65:"AND",66:"OR",67:"NOT",70:"DIFERENT",71:"MINOR",72:"MINOREQUAL",73:"GREATER",74:"GREATEREQUAL",75:"PLUS",76:"LESS",77:"DIVIDED",78:"MODUL",79:"RIF",80:"RTHEN",82:"REND",83:"RELSE",84:"RCASE",87:"RAS",88:"RWHEN",89:"RWHILE",90:"RBEGIN",91:"RFOR",92:"RIN",93:"ENTERO",94:"RANGO",99:"DECIMAL",100:"DATE",101:"CADENA",102:"RTRUE",103:"RFALSE",104:"RNULL",105:"RCAST",106:"RINT",107:"RDOUBLE",108:"RDATE",109:"RVARCHAR",110:"RBOOLEAN"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[7,3],[8,3],[8,6],[23,4],[23,2],[9,5],[10,3],[11,1],[11,1],[11,1],[32,7],[39,4],[39,2],[33,7],[33,7],[33,7],[33,9],[34,4],[12,1],[12,1],[12,1],[12,1],[12,1],[47,11],[54,3],[54,1],[56,3],[56,1],[48,5],[48,5],[48,7],[48,7],[49,7],[62,3],[62,5],[50,4],[51,6],[60,3],[60,3],[60,3],[60,1],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[69,3],[69,3],[69,3],[69,3],[69,2],[69,1],[13,7],[13,9],[14,7],[14,8],[14,6],[14,7],[86,2],[85,5],[85,4],[81,1],[15,6],[16,10],[21,1],[21,1],[21,1],[21,1],[21,1],[21,3],[21,1],[95,3],[95,3],[95,3],[95,3],[95,2],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[97,3],[97,3],[97,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[98,6],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:$V3,29:$V4,31:$V5,32:20,33:21,34:22,35:$V6,41:$V7,43:$V8,47:23,48:24,49:25,50:26,51:27,52:$V9,61:$Va,63:$Vb,64:$Vc,79:$Vd,84:$Ve,89:$Vf,91:$Vg},{1:[3]},{5:[1,39],6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:$V3,29:$V4,31:$V5,32:20,33:21,34:22,35:$V6,41:$V7,43:$V8,47:23,48:24,49:25,50:26,51:27,52:$V9,61:$Va,63:$Vb,64:$Vc,79:$Vd,84:$Ve,89:$Vf,91:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),{18:[1,41]},{18:[1,42]},{21:43,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{23:61,24:[1,62]},{24:[1,63]},{24:[1,64],37:$Vu,54:65,58:[1,66]},o($Vh,[2,23]),o($Vh,[2,24]),o($Vh,[2,25]),o($Vh,[2,34]),o($Vh,[2,35]),o($Vh,[2,36]),o($Vh,[2,37]),o($Vh,[2,38]),{21:68,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:69,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,85:70,88:$Vv,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:72,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{24:[1,73]},{36:[1,74]},{36:[1,75]},{36:[1,76]},{53:[1,77]},{37:[1,78]},{36:[1,79]},{57:[1,80]},{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,14]),o($Vh,[2,15]),{18:[1,81],30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH},o($VI,[2,81]),o($VI,[2,82]),o($VI,[2,83]),o($VI,[2,84]),o($VI,[2,85]),{21:94,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},o($VI,[2,87]),o($VJ,[2,102]),o($VJ,[2,103]),o($VJ,[2,104]),o($VJ,[2,105]),o($VJ,[2,106]),o($VJ,[2,107]),o($VJ,[2,108]),{21:95,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:96,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{38:[1,97]},{18:[1,98],28:[1,99]},{2:$VK,25:100,106:$VL,107:$VM,108:$VN,109:$VO,110:$VP},{30:[1,107]},{18:[1,108]},{28:$VQ,57:[1,109]},{57:[1,111]},o($VR,[2,41]),{30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,80:[1,112]},{30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,85:113,88:$Vv},{83:[1,114],88:$VS},{21:116,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,90:[1,117]},{92:[1,118]},{37:[1,119]},{37:[1,120]},{37:[1,121]},{37:[1,122]},{29:[1,123]},{37:[1,124]},{37:[1,125]},o($Vh,[2,16]),{21:126,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:127,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:128,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:129,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:130,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:131,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:132,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:133,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:134,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:135,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:136,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:137,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{30:$Vw,40:[1,138],65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH},o($VI,[2,92]),o($VT,[2,101],{30:$Vw,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH}),{21:139,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},o($Vh,[2,17]),{24:[1,140]},o($VU,[2,20],{26:[1,141]}),o($VV,[2,110]),o($VV,[2,111]),o($VV,[2,112]),o($VV,[2,113]),o($VV,[2,114]),o($VV,[2,115]),{21:142,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},o($Vh,[2,22]),{37:[1,143]},{37:[1,144]},{37:[1,145]},{4:147,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:$V3,29:$V4,31:$V5,32:20,33:21,34:22,35:$V6,41:$V7,43:$V8,47:23,48:24,49:25,50:26,51:27,52:$V9,61:$Va,63:$Vb,64:$Vc,79:$Vd,81:146,84:$Ve,89:$Vf,91:$Vg},{83:[1,148],88:$VS},{21:149,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{21:150,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,80:[1,151]},{4:147,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:$V3,29:$V4,31:$V5,32:20,33:21,34:22,35:$V6,41:$V7,43:$V8,47:23,48:24,49:25,50:26,51:27,52:$V9,61:$Va,63:$Vb,64:$Vc,79:$Vd,81:152,84:$Ve,89:$Vf,91:$Vg},{93:[1,153]},{38:[1,154]},{42:[1,155],43:[1,156],45:[1,157]},{18:[1,158]},{38:[1,159]},{37:[1,161],62:160},{18:[1,162]},{59:[1,163]},o($VW,[2,88],{77:$VG,78:$VH}),o($VW,[2,89],{77:$VG,78:$VH}),o($VI,[2,90]),o($VI,[2,91]),o($VX,[2,93],{75:$VE,76:$VF,77:$VG,78:$VH}),o($VX,[2,94],{75:$VE,76:$VF,77:$VG,78:$VH}),o($VX,[2,95],{75:$VE,76:$VF,77:$VG,78:$VH}),o($VX,[2,96],{75:$VE,76:$VF,77:$VG,78:$VH}),o($VX,[2,97],{75:$VE,76:$VF,77:$VG,78:$VH}),o($VX,[2,98],{75:$VE,76:$VF,77:$VG,78:$VH}),o($VT,[2,99],{30:$Vw,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH}),o([18,40,66,80,82,83,87,88,90],[2,100],{30:$Vw,65:$Vx,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH}),o($VI,[2,86]),{30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,87:[1,164]},{2:$VK,25:165,106:$VL,107:$VM,108:$VN,109:$VO,110:$VP},{27:166,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{18:[1,167],30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH},{18:[1,168],59:[1,169]},o($VR,[2,40]),{18:[1,170],59:[1,171]},{82:[1,172],83:[1,173]},o([82,83],[2,78],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,32:20,33:21,34:22,47:23,48:24,49:25,50:26,51:27,6:40,17:$V0,19:$V1,20:$V2,22:$V3,29:$V4,31:$V5,35:$V6,41:$V7,43:$V8,52:$V9,61:$Va,63:$Vb,64:$Vc,79:$Vd,84:$Ve,89:$Vf,91:$Vg}),{21:174,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,82:[1,175]},{30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,80:[1,176]},{21:177,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},{82:[1,178]},{94:[1,179]},{37:[1,181],39:180},{37:[1,182]},{44:[1,183]},{44:[1,185],46:[1,184]},o($Vh,[2,33]),{37:$Vu,54:186},{28:[1,188],59:[1,187]},{30:[1,189]},o($Vh,[2,51]),{37:$VY,60:190,68:191},{2:$VK,25:193,106:$VL,107:$VM,108:$VN,109:$VO,110:$VP},o($VU,[2,19]),{18:[1,194]},o($Vh,[2,21]),o($Vh,[2,44]),{37:$VY,60:195,68:191},o($Vh,[2,45]),{37:$VY,60:196,68:191},{79:[1,197]},{4:147,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:$V3,29:$V4,31:$V5,32:20,33:21,34:22,35:$V6,41:$V7,43:$V8,47:23,48:24,49:25,50:26,51:27,52:$V9,61:$Va,63:$Vb,64:$Vc,79:$Vd,81:198,84:$Ve,89:$Vf,91:$Vg},{30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,82:[1,199]},{18:[1,200],86:201,87:$VZ},{21:203,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},o($V_,[2,77],{30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH}),{18:[1,204]},{93:[1,205]},{28:[1,207],40:[1,206]},{2:$VK,25:208,106:$VL,107:$VM,108:$VN,109:$VO,110:$VP},{2:$VK,25:209,106:$VL,107:$VM,108:$VN,109:$VO,110:$VP},{37:[1,210]},{37:[1,211]},{37:[1,212]},{28:$VQ,40:[1,213]},{37:$VY,60:214,68:191},{37:[1,215]},{27:216,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{18:[1,217],65:$V$,66:$V01,67:$V11},o($V21,[2,56]),{30:[1,221],70:[1,222],71:[1,223],72:[1,224],73:[1,225],74:[1,226]},{40:[1,227]},o($Vh,[2,18]),{18:[1,228],65:$V$,66:$V01,67:$V11},{18:[1,229],65:$V$,66:$V01,67:$V11},{18:[1,230]},{82:[1,231]},{18:[1,232],86:233,87:$VZ},o($Vh,[2,73]),{18:[1,234]},{21:235,24:$Vi,27:44,38:$Vj,67:$Vk,76:$Vl,93:$Vm,95:45,96:46,97:47,98:48,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt},o($V_,[2,76],{30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH}),o($Vh,[2,79]),{90:[1,236]},{18:[1,237]},{37:[1,238]},o($V31,[2,28]),{18:[1,239]},{18:[1,240]},{18:[1,241]},{46:[1,242]},{55:[1,243]},{18:[1,244],65:$V$,66:$V01,67:$V11},{30:[1,245]},o($V41,[2,49]),o($Vh,[2,52]),{37:$VY,60:246,68:191},{37:$VY,60:247,68:191},{37:$VY,60:248,68:191},{27:251,69:249,76:$V51,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{27:251,69:252,76:$V51,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{27:251,69:253,76:$V51,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{27:251,69:254,76:$V51,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{27:251,69:255,76:$V51,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{27:251,69:256,76:$V51,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($VI,[2,109]),o($Vh,[2,46]),o($Vh,[2,47]),o($Vh,[2,69]),{79:[1,257]},o($Vh,[2,71]),{18:[1,258]},o($Vh,[2,74]),{18:[2,75],30:$Vw,65:$Vx,66:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH},{4:147,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:$V3,29:$V4,31:$V5,32:20,33:21,34:22,35:$V6,41:$V7,43:$V8,47:23,48:24,49:25,50:26,51:27,52:$V9,61:$Va,63:$Vb,64:$Vc,79:$Vd,81:259,84:$Ve,89:$Vf,91:$Vg},o($Vh,[2,26]),{2:$VK,25:260,106:$VL,107:$VM,108:$VN,109:$VO,110:$VP},o($Vh,[2,29]),o($Vh,[2,30]),o($Vh,[2,31]),{37:[1,261]},{38:[1,262]},o($Vh,[2,48]),{27:263,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o([18,65,66],[2,53],{67:$V11}),o([18,66],[2,54],{65:$V$,67:$V11}),o($V21,[2,55]),o($V21,[2,57],{75:$V61,76:$V71,77:$V81,78:$V91}),{27:251,69:268,76:$V51,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($Va1,[2,68]),o($V21,[2,58],{75:$V61,76:$V71,77:$V81,78:$V91}),o($V21,[2,59],{75:$V61,76:$V71,77:$V81,78:$V91}),o($V21,[2,60],{75:$V61,76:$V71,77:$V81,78:$V91}),o($V21,[2,61],{75:$V61,76:$V71,77:$V81,78:$V91}),o($V21,[2,62],{75:$V61,76:$V71,77:$V81,78:$V91}),{18:[1,269]},o($Vh,[2,72]),{82:[1,270]},o($V31,[2,27]),{18:[1,271]},{27:273,56:272,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($V41,[2,50]),{27:251,69:274,76:$V51,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{27:251,69:275,76:$V51,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{27:251,69:276,76:$V51,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{27:251,69:277,76:$V51,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($Va1,[2,67]),o($Vh,[2,70]),{18:[1,278]},o($Vh,[2,32]),{28:[1,280],40:[1,279]},o($V31,[2,43]),o($Vb1,[2,63],{77:$V81,78:$V91}),o($Vb1,[2,64],{77:$V81,78:$V91}),o($Va1,[2,65]),o($Va1,[2,66]),o($Vh,[2,80]),{18:[1,281]},{27:282,93:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($Vh,[2,39]),o($V31,[2,42])];
    defaultActions: {[key:number]: any} = {39:[2,1]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

		return $$[$0-1]
	
break;
case 2:

		$$[$0-1].push($$[$0])
		this.$ = $$[$0-1]
	
break;
case 3:

		this.$ = [$$[$0]]
	
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 23: case 24: case 25: case 34: case 35: case 36: case 37: case 38: case 56: case 68: case 75: case 81: case 82: case 83: case 84: case 85:

		this.$ = $$[$0]
	
break;
case 14:

		this.$ = new Primitive( null, Type_dxnry.BREAK)
	
break;
case 15:

		this.$ = new Primitive( null, Type_dxnry.CONTINUE)
	
break;
case 16:

		this.$ = new Print( $$[$0-1])
	
break;
case 17:

		this.$ = new Declarate($$[$0-1])
	
break;
case 18:

		// DECLARE @id INT DEFAULT 1
		this.$ = new Declarate_def($$[$0-4], $$[$0-3], $$[$0-1])
	
break;
case 19:

		$$[$0-3].push(new var_list($$[$0-1], $$[$0]))
		this.$ = $$[$0-3]
	
break;
case 20:



		this.$ = [new var_list($$[$0-1], $$[$0])]
	
break;
case 21:

		this.$ = new Set($$[$0-3], $$[$0-1])
	
break;
case 22:

		this.$ = new Select($$[$0-1])
	
break;
case 26:

		this.$ = new ddl_Create_Table($$[$0-4], $$[$0-2])
	
break;
case 27:

		this.$ = $$[$0-3]
		$$[$0-3].push([$$[$0-1], $$[$0]])
	
break;
case 28:

		this.$ = []
		this.$.push([$$[$0-1], $$[$0]])
	
break;
case 29:

		this.$ = new ddl_Add($$[$0-4], $$[$0-2], $$[$0-1])
	
break;
case 30:

		this.$ = new ddl_Drop_Column($$[$0-4], $$[$0-1])
	
break;
case 31:

		this.$ = new ddl_Rename_table($$[$0-4], $$[$0-1])
	
break;
case 32:

		this.$ = new ddl_Rename_Column($$[$0-6], $$[$0-3], $$[$0-1])
	
break;
case 33:

		this.$ = new ddl_Drop_Table($$[$0-1])
	
break;
case 39:

		this.$ = new dml_Insert($$[$0-8], $$[$0-6], $$[$0-2])
	
break;
case 40: case 42:

		this.$ = $$[$0-2]
		$$[$0-2].push($$[$0])
	
break;
case 41: case 43:

		this.$ = []
		this.$.push($$[$0])
	
break;
case 44:

		this.$ = new dml_Select($$[$0-3], $$[$0-1])
	
break;
case 45:

		this.$ = new dml_Select("*", $$[$0-1])
	
break;
case 46:

		this.$ = new dml_Select_where($$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 47:

		this.$ = new dml_Select_where("*", $$[$0-3], $$[$0-1])
	
break;
case 48:

		this.$ = new dml_Update($$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 49: case 77:

		this.$ = []
		this.$.push([$$[$0-2], $$[$0]])
	
break;
case 50: case 76:

		this.$ = $$[$0-4]
		$$[$0-4].push([$$[$0-2], $$[$0]])
	
break;
case 51:

		this.$ = new dml_Truncate($$[$0-1])
	
break;
case 52:

		this.$ = new dml_Delete($$[$0-3], $$[$0-1])
	
break;
case 53: case 54: case 55: case 99: case 100:

		this.$ = new Logics($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 57: case 58: case 59: case 60: case 61: case 62: case 93: case 94: case 95: case 96: case 97: case 98:

		this.$ = new Relational($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 63: case 64: case 65: case 66: case 88: case 89: case 90: case 91:

		this.$ = new Aritmertic($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 67: case 92:

		this.$ = new Aritmertic($$[$0], "!", $$[$0])
	
break;
case 69:

		this.$ = new If($$[$0-5], $$[$0-3], null)
	
break;
case 70:

		this.$ = new If($$[$0-7], $$[$0-5], $$[$0-3])
	
break;
case 71:

		this.$ = new Case($$[$0-5], $$[$0-4], $$[$0-2], null)
	
break;
case 72:

		this.$ = new Case($$[$0-6], $$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 73:

		this.$ = new Case(null, $$[$0-4], $$[$0-2], null)
	
break;
case 74:

		this.$ = new Case(null, $$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 78:

		this.$ = new Statement($$[$0])
	
break;
case 79:

		this.$ = new While($$[$0-4], $$[$0-2])
	
break;
case 80:

		this.$ = new For(new Variable($$[$0-8]), parseInt($$[$0-6]), parseInt($$[$0-4]), $$[$0-2])
	
break;
case 86:

		this.$ = new Group($$[$0-1])
	
break;
case 87:

		this.$ = new Variable($$[$0])
	
break;
case 101:

		this.$ = new Logics($$[$0], $$[$0-1], $$[$0])
	
break;
case 102:

		this.$ = new Primitive( $$[$0], Type_dxnry.INT)
	
break;
case 103:

		this.$ = new Primitive( $$[$0], Type_dxnry.DOUBLE)
	
break;
case 104:

		this.$ = new Primitive( $$[$0], Type_dxnry.DATE)
	
break;
case 105:

		let string_tmp = $$[$0].toString().replace('"','')
		string_tmp = string_tmp.replace('"','')
		this.$ = new Primitive( string_tmp, Type_dxnry.STRING)
	
break;
case 106: case 107:

		this.$ = new Primitive( $$[$0], Type_dxnry.BOOLEAN)
	
break;
case 108:

		this.$ = new Primitive( $$[$0], Type_dxnry.NULL)
	
break;
case 109:

		this.$ = new Cast( $$[$0-3], $$[$0-1])
	
break;
case 110:

		this.$ = Type_dxnry.INT
	
break;
case 111:

		this.$ = Type_dxnry.DOUBLE
	
break;
case 112:

		this.$ = Type_dxnry.DATE
	
break;
case 113:

		this.$ = Type_dxnry.STRING
	
break;
case 114:

		this.$ = Type_dxnry.BOOLEAN
	
break;
case 115:

		console.error('Error sintáctico: ' + yytext + ',  linea: ' + this.$.first_line + ', columna: ' + this.$.first_column)
	
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class QueryParserLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"QueryParser"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\.\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:print\b)/i,/^(?:declare\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:default\b)/i,/^(?:end\b)/i,/^(?:set\b)/i,/^(?:select\b)/i,/^(?:create\b)/i,/^(?:table\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:cast\b)/i,/^(?:as\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:when\b)/i,/^(?:case\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:(@[^@\s,;()]+))/i,/^(?:(\d{4}-\d{2}-\d{2}))/i,/^(?:(\d+\.\d+))/i,/^(?:([0-9]+))/i,/^(?:("([^"\\]|\\.)*"))/i,/^(?:([a-z][a-z0-9_-]*))/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0: return 94
      break;
    case 1: return 38
      break;
    case 2: return 40
      break;
    case 3: return 18
      break;
    case 4: return 28
      break;
    case 5: return 75
      break;
    case 6: return 76
      break;
    case 7: return 77
      break;
    case 8: return 58
      break;
    case 9: return 78
      break;
    case 10: return 74
      break;
    case 11: return 72
      break;
    case 12: return 70
      break;
    case 13: return 30
      break;
    case 14: return 71
      break;
    case 15: return 73
      break;
    case 16: return 65
      break;
    case 17: return 66
      break;
    case 18: return 67
      break;
    case 19: return 102
      break;
    case 20: return 103
      break;
    case 21: return 104
      break;
    case 22: return 20
      break;
    case 23: return 22
      break;
    case 24: return 106
      break;
    case 25: return 107
      break;
    case 26: return 108
      break;
    case 27: return 109
      break;
    case 28: return 110
      break;
    case 29: return 26
      break;
    case 30: return 82
      break;
    case 31: return 29
      break;
    case 32: return 31
      break;
    case 33: return 35
      break;
    case 34: return 36
      break;
    case 35: return 41
      break;
    case 36: return 42
      break;
    case 37: return 43
      break;
    case 38: return 44
      break;
    case 39: return 45
      break;
    case 40: return 46
      break;
    case 41: return 52
      break;
    case 42: return 53
      break;
    case 43: return 55
      break;
    case 44: return 57
      break;
    case 45: return 59
      break;
    case 46: return 61
      break;
    case 47: return 63
      break;
    case 48: return 64
      break;
    case 49: return 105
      break;
    case 50: return 87
      break;
    case 51: return 79
      break;
    case 52: return 80
      break;
    case 53: return 83
      break;
    case 54: return 88
      break;
    case 55: return 84
      break;
    case 56: return 90
      break;
    case 57: return 82
      break;
    case 58: return 89
      break;
    case 59: return 91
      break;
    case 60: return 92
      break;
    case 61: return 17
      break;
    case 62: return 19
      break;
    case 63: return 24
      break;
    case 64: return 100
      break;
    case 65: return 99
      break;
    case 66: return 93
      break;
    case 67: return 101
      break;
    case 68: return 37
      break;
    case 69:/* Espacios se ignoran */
      break;
    case 70:return 5;
      break;
    case 71: console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
      break;
        }
    }
}

