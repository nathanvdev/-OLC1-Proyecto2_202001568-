/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  	import Print from '../instruction/print.js'
	import Primitive from "../expression/primitives.js"
	import {Type_dxnry} from "../abstrac/Return.js"
  	import {Declarate, Declarate_def, Set, Select} from "../instruction/Declarate.js"
  	import {var_list} from "../instruction/Declarate.js"
  	import Aritmertic from "../expression/Aritmetic.js"
	import Relational from "../expression/Relational.js"
	import Logics from "../expression/Logics.js"
	import ddl_Create_Table from '../instruction/DDl/ddl_Create_Table.js'
	import ddl_Add from '../instruction/DDl/ddl_Add.js'
	import { ddl_Drop_Column, ddl_Drop_Table } from '../instruction/DDl/ddl_Drop.js'
	import ddl_Rename_table from '../instruction/DDl/ddl_Rename_table.js'
	import ddl_Rename_Column from '../instruction/DDl/ddl_Rename_column.js'
	import dml_Insert from '../instruction/DML/dml_Insert.js'
	import { dml_Select, dml_Select_where } from '../instruction/DML/dml_Select.js'
	import dml_Update from '../instruction/DML/dml_update.js'
	import dml_Truncate from '../instruction/DML/dml_Truncate.js'
	import dml_Delete from '../instruction/DML/dml_Delete.js'
	import Cast from '../expression/Cast.js'
	import Statement from '../instruction/Statement.js'
	import If from '../instruction/If.js'
	import Variable from '../expression/Variable.js'
	import Case from '../instruction/Case.js'
  	import Group from '../expression/Group.js'
    import While from '../instruction/While.js'
    import For from '../instruction/For.js'



import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,14],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,30],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,35],$Va=[1,36],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[5,17,20,27,29,33,39,41,50,59,61,62,77,80,81,82,87,89],$Vg=[1,46],$Vh=[1,45],$Vi=[1,55],$Vj=[1,54],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,56],$Vs=[1,63],$Vt=[1,67],$Vu=[1,82],$Vv=[1,88],$Vw=[1,89],$Vx=[1,83],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[19,28,38,63,64,68,69,70,71,72,73,74,75,76,78,80,81,85,86,88],$VH=[19,26,28,38,57,63,64,65,68,69,70,71,72,73,74,75,76,78,80,81,85,86,88],$VI=[1,102],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,106],$VP=[26,38,55],$VQ=[1,111],$VR=[19,38,63,64,78,80,81,85,86,88],$VS=[19,26],$VT=[19,24,26,38],$VU=[19,28,38,63,64,68,69,70,71,72,73,74,78,80,81,85,86,88],$VV=[19,28,38,63,64,68,69,70,71,72,78,80,81,85,86,88],$VW=[1,188],$VX=[1,198],$VY=[81,86],$VZ=[1,214],$V_=[1,215],$V$=[1,216],$V01=[19,63,64,65],$V11=[26,38],$V21=[26,57],$V31=[1,246],$V41=[1,260],$V51=[1,261],$V61=[1,262],$V71=[1,263],$V81=[19,63,64,65,73,74,75,76],$V91=[19,63,64,65,73,74];

export class QueryParserParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new QueryParserLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print":7,"declare":8,"set":9,"select":10,"ddl":11,"dml":12,"if":13,"case":14,"while":15,"for":16,"RPRINT":17,"expresion":18,"PUNTOCOMA":19,"RDECLARE":20,"variable_l":21,"VARIABLE_NAME":22,"data_type":23,"RDEFAULT":24,"primitivo":25,"COMMA":26,"RSET":27,"EQUAL":28,"RSELECT":29,"create":30,"alter":31,"drop":32,"RCREATE":33,"RTABLE":34,"ID":35,"PARENIZQ":36,"column_list":37,"PARENDER":38,"RALTER":39,"RADD":40,"RDROP":41,"RCOLUMN":42,"RRENAME":43,"RTO":44,"dml_insert":45,"dml_select":46,"dml_update":47,"dml_truncate":48,"dml_delete":49,"RINSERT":50,"RINTO":51,"id_list":52,"RVALUES":53,"values_list":54,"RFROM":55,"BY":56,"RWHERE":57,"where_conds":58,"RUPDATE":59,"set_columns":60,"RTRUNCATE":61,"RDELETE":62,"AND":63,"OR":64,"NOT":65,"condition":66,"arit_cond":67,"DIFERENT":68,"MINOR":69,"MINOREQUAL":70,"GREATER":71,"GREATEREQUAL":72,"PLUS":73,"LESS":74,"DIVIDED":75,"MODUL":76,"RIF":77,"RTHEN":78,"newStatement":79,"REND":80,"RELSE":81,"RCASE":82,"case_list":83,"a_s":84,"RAS":85,"RWHEN":86,"RWHILE":87,"RBEGIN":88,"RFOR":89,"RIN":90,"ENTERO":91,"RANGO":92,"aritmetica":93,"relacional":94,"logica":95,"cast":96,"DECIMAL":97,"DATE":98,"CADENA":99,"RTRUE":100,"RFALSE":101,"RNULL":102,"RCAST":103,"RINT":104,"RDOUBLE":105,"RDATE":106,"RVARCHAR":107,"RBOOLEAN":108,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",17:"RPRINT",19:"PUNTOCOMA",20:"RDECLARE",22:"VARIABLE_NAME",24:"RDEFAULT",26:"COMMA",27:"RSET",28:"EQUAL",29:"RSELECT",33:"RCREATE",34:"RTABLE",35:"ID",36:"PARENIZQ",38:"PARENDER",39:"RALTER",40:"RADD",41:"RDROP",42:"RCOLUMN",43:"RRENAME",44:"RTO",50:"RINSERT",51:"RINTO",53:"RVALUES",55:"RFROM",56:"BY",57:"RWHERE",59:"RUPDATE",61:"RTRUNCATE",62:"RDELETE",63:"AND",64:"OR",65:"NOT",68:"DIFERENT",69:"MINOR",70:"MINOREQUAL",71:"GREATER",72:"GREATEREQUAL",73:"PLUS",74:"LESS",75:"DIVIDED",76:"MODUL",77:"RIF",78:"RTHEN",80:"REND",81:"RELSE",82:"RCASE",85:"RAS",86:"RWHEN",87:"RWHILE",88:"RBEGIN",89:"RFOR",90:"RIN",91:"ENTERO",92:"RANGO",97:"DECIMAL",98:"DATE",99:"CADENA",100:"RTRUE",101:"RFALSE",102:"RNULL",103:"RCAST",104:"RINT",105:"RDOUBLE",106:"RDATE",107:"RVARCHAR",108:"RBOOLEAN"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,3],[8,3],[8,6],[21,4],[21,2],[9,5],[10,3],[11,1],[11,1],[11,1],[30,7],[37,4],[37,2],[31,7],[31,7],[31,7],[31,9],[32,4],[12,1],[12,1],[12,1],[12,1],[12,1],[45,11],[52,3],[52,1],[54,3],[54,1],[46,5],[46,5],[46,7],[46,7],[47,7],[60,3],[60,5],[48,4],[49,6],[58,3],[58,3],[58,3],[58,1],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[67,3],[67,3],[67,3],[67,3],[67,2],[67,1],[13,7],[13,9],[14,7],[14,8],[14,6],[14,7],[84,2],[83,5],[83,4],[79,1],[15,6],[16,10],[18,1],[18,1],[18,1],[18,1],[18,1],[18,3],[18,1],[93,3],[93,3],[93,3],[93,3],[93,2],[94,3],[94,3],[94,3],[94,3],[94,3],[94,3],[95,3],[95,3],[95,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[96,6],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,20:$V1,27:$V2,29:$V3,30:18,31:19,32:20,33:$V4,39:$V5,41:$V6,45:21,46:22,47:23,48:24,49:25,50:$V7,59:$V8,61:$V9,62:$Va,77:$Vb,82:$Vc,87:$Vd,89:$Ve},{1:[3]},{5:[1,37],6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,20:$V1,27:$V2,29:$V3,30:18,31:19,32:20,33:$V4,39:$V5,41:$V6,45:21,46:22,47:23,48:24,49:25,50:$V7,59:$V8,61:$V9,62:$Va,77:$Vb,82:$Vc,87:$Vd,89:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),{18:39,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{21:57,22:[1,58]},{22:[1,59]},{22:[1,60],35:$Vs,52:61,56:[1,62]},o($Vf,[2,21]),o($Vf,[2,22]),o($Vf,[2,23]),o($Vf,[2,32]),o($Vf,[2,33]),o($Vf,[2,34]),o($Vf,[2,35]),o($Vf,[2,36]),{18:64,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:65,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,83:66,86:$Vt,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:68,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{22:[1,69]},{34:[1,70]},{34:[1,71]},{34:[1,72]},{51:[1,73]},{35:[1,74]},{34:[1,75]},{55:[1,76]},{1:[2,1]},o($Vf,[2,2]),{19:[1,77],28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF},o($VG,[2,79]),o($VG,[2,80]),o($VG,[2,81]),o($VG,[2,82]),o($VG,[2,83]),{18:90,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},o($VG,[2,85]),o($VH,[2,100]),o($VH,[2,101]),o($VH,[2,102]),o($VH,[2,103]),o($VH,[2,104]),o($VH,[2,105]),o($VH,[2,106]),{18:91,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:92,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{36:[1,93]},{19:[1,94],26:[1,95]},{2:$VI,23:96,104:$VJ,105:$VK,106:$VL,107:$VM,108:$VN},{28:[1,103]},{19:[1,104]},{26:$VO,55:[1,105]},{55:[1,107]},o($VP,[2,39]),{28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,78:[1,108]},{28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,83:109,86:$Vt},{81:[1,110],86:$VQ},{18:112,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,88:[1,113]},{90:[1,114]},{35:[1,115]},{35:[1,116]},{35:[1,117]},{35:[1,118]},{27:[1,119]},{35:[1,120]},{35:[1,121]},o($Vf,[2,14]),{18:122,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:123,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:124,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:125,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:126,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:127,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:128,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:129,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:130,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:131,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:132,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:133,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{28:$Vu,38:[1,134],63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF},o($VG,[2,90]),o($VR,[2,99],{28:$Vu,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF}),{18:135,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},o($Vf,[2,15]),{22:[1,136]},o($VS,[2,18],{24:[1,137]}),o($VT,[2,108]),o($VT,[2,109]),o($VT,[2,110]),o($VT,[2,111]),o($VT,[2,112]),o($VT,[2,113]),{18:138,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},o($Vf,[2,20]),{35:[1,139]},{35:[1,140]},{35:[1,141]},{4:143,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,20:$V1,27:$V2,29:$V3,30:18,31:19,32:20,33:$V4,39:$V5,41:$V6,45:21,46:22,47:23,48:24,49:25,50:$V7,59:$V8,61:$V9,62:$Va,77:$Vb,79:142,82:$Vc,87:$Vd,89:$Ve},{81:[1,144],86:$VQ},{18:145,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{18:146,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,78:[1,147]},{4:143,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,20:$V1,27:$V2,29:$V3,30:18,31:19,32:20,33:$V4,39:$V5,41:$V6,45:21,46:22,47:23,48:24,49:25,50:$V7,59:$V8,61:$V9,62:$Va,77:$Vb,79:148,82:$Vc,87:$Vd,89:$Ve},{91:[1,149]},{36:[1,150]},{40:[1,151],41:[1,152],43:[1,153]},{19:[1,154]},{36:[1,155]},{35:[1,157],60:156},{19:[1,158]},{57:[1,159]},o($VU,[2,86],{75:$VE,76:$VF}),o($VU,[2,87],{75:$VE,76:$VF}),o($VG,[2,88]),o($VG,[2,89]),o($VV,[2,91],{73:$VC,74:$VD,75:$VE,76:$VF}),o($VV,[2,92],{73:$VC,74:$VD,75:$VE,76:$VF}),o($VV,[2,93],{73:$VC,74:$VD,75:$VE,76:$VF}),o($VV,[2,94],{73:$VC,74:$VD,75:$VE,76:$VF}),o($VV,[2,95],{73:$VC,74:$VD,75:$VE,76:$VF}),o($VV,[2,96],{73:$VC,74:$VD,75:$VE,76:$VF}),o($VR,[2,97],{28:$Vu,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF}),o([19,38,64,78,80,81,85,86,88],[2,98],{28:$Vu,63:$Vv,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF}),o($VG,[2,84]),{28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,85:[1,160]},{2:$VI,23:161,104:$VJ,105:$VK,106:$VL,107:$VM,108:$VN},{25:162,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},{19:[1,163],28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF},{19:[1,164],57:[1,165]},o($VP,[2,38]),{19:[1,166],57:[1,167]},{80:[1,168],81:[1,169]},o([80,81],[2,76],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,30:18,31:19,32:20,45:21,46:22,47:23,48:24,49:25,6:38,17:$V0,20:$V1,27:$V2,29:$V3,33:$V4,39:$V5,41:$V6,50:$V7,59:$V8,61:$V9,62:$Va,77:$Vb,82:$Vc,87:$Vd,89:$Ve}),{18:170,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,80:[1,171]},{28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,78:[1,172]},{18:173,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},{80:[1,174]},{92:[1,175]},{35:[1,177],37:176},{35:[1,178]},{42:[1,179]},{42:[1,181],44:[1,180]},o($Vf,[2,31]),{35:$Vs,52:182},{26:[1,184],57:[1,183]},{28:[1,185]},o($Vf,[2,49]),{35:$VW,58:186,66:187},{2:$VI,23:189,104:$VJ,105:$VK,106:$VL,107:$VM,108:$VN},o($VS,[2,17]),{19:[1,190]},o($Vf,[2,19]),o($Vf,[2,42]),{35:$VW,58:191,66:187},o($Vf,[2,43]),{35:$VW,58:192,66:187},{77:[1,193]},{4:143,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,20:$V1,27:$V2,29:$V3,30:18,31:19,32:20,33:$V4,39:$V5,41:$V6,45:21,46:22,47:23,48:24,49:25,50:$V7,59:$V8,61:$V9,62:$Va,77:$Vb,79:194,82:$Vc,87:$Vd,89:$Ve},{28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,80:[1,195]},{19:[1,196],84:197,85:$VX},{18:199,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},o($VY,[2,75],{28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF}),{19:[1,200]},{91:[1,201]},{26:[1,203],38:[1,202]},{2:$VI,23:204,104:$VJ,105:$VK,106:$VL,107:$VM,108:$VN},{2:$VI,23:205,104:$VJ,105:$VK,106:$VL,107:$VM,108:$VN},{35:[1,206]},{35:[1,207]},{35:[1,208]},{26:$VO,38:[1,209]},{35:$VW,58:210,66:187},{35:[1,211]},{25:212,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},{19:[1,213],63:$VZ,64:$V_,65:$V$},o($V01,[2,54]),{28:[1,217],68:[1,218],69:[1,219],70:[1,220],71:[1,221],72:[1,222]},{38:[1,223]},o($Vf,[2,16]),{19:[1,224],63:$VZ,64:$V_,65:$V$},{19:[1,225],63:$VZ,64:$V_,65:$V$},{19:[1,226]},{80:[1,227]},{19:[1,228],84:229,85:$VX},o($Vf,[2,71]),{19:[1,230]},{18:231,22:$Vg,25:40,36:$Vh,65:$Vi,74:$Vj,91:$Vk,93:41,94:42,95:43,96:44,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr},o($VY,[2,74],{28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF}),o($Vf,[2,77]),{88:[1,232]},{19:[1,233]},{35:[1,234]},o($V11,[2,26]),{19:[1,235]},{19:[1,236]},{19:[1,237]},{44:[1,238]},{53:[1,239]},{19:[1,240],63:$VZ,64:$V_,65:$V$},{28:[1,241]},o($V21,[2,47]),o($Vf,[2,50]),{35:$VW,58:242,66:187},{35:$VW,58:243,66:187},{35:$VW,58:244,66:187},{25:247,67:245,74:$V31,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},{25:247,67:248,74:$V31,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},{25:247,67:249,74:$V31,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},{25:247,67:250,74:$V31,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},{25:247,67:251,74:$V31,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},{25:247,67:252,74:$V31,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},o($VG,[2,107]),o($Vf,[2,44]),o($Vf,[2,45]),o($Vf,[2,67]),{77:[1,253]},o($Vf,[2,69]),{19:[1,254]},o($Vf,[2,72]),{19:[2,73],28:$Vu,63:$Vv,64:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF},{4:143,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,20:$V1,27:$V2,29:$V3,30:18,31:19,32:20,33:$V4,39:$V5,41:$V6,45:21,46:22,47:23,48:24,49:25,50:$V7,59:$V8,61:$V9,62:$Va,77:$Vb,79:255,82:$Vc,87:$Vd,89:$Ve},o($Vf,[2,24]),{2:$VI,23:256,104:$VJ,105:$VK,106:$VL,107:$VM,108:$VN},o($Vf,[2,27]),o($Vf,[2,28]),o($Vf,[2,29]),{35:[1,257]},{36:[1,258]},o($Vf,[2,46]),{25:259,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},o([19,63,64],[2,51],{65:$V$}),o([19,64],[2,52],{63:$VZ,65:$V$}),o($V01,[2,53]),o($V01,[2,55],{73:$V41,74:$V51,75:$V61,76:$V71}),{25:247,67:264,74:$V31,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},o($V81,[2,66]),o($V01,[2,56],{73:$V41,74:$V51,75:$V61,76:$V71}),o($V01,[2,57],{73:$V41,74:$V51,75:$V61,76:$V71}),o($V01,[2,58],{73:$V41,74:$V51,75:$V61,76:$V71}),o($V01,[2,59],{73:$V41,74:$V51,75:$V61,76:$V71}),o($V01,[2,60],{73:$V41,74:$V51,75:$V61,76:$V71}),{19:[1,265]},o($Vf,[2,70]),{80:[1,266]},o($V11,[2,25]),{19:[1,267]},{25:269,54:268,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},o($V21,[2,48]),{25:247,67:270,74:$V31,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},{25:247,67:271,74:$V31,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},{25:247,67:272,74:$V31,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},{25:247,67:273,74:$V31,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},o($V81,[2,65]),o($Vf,[2,68]),{19:[1,274]},o($Vf,[2,30]),{26:[1,276],38:[1,275]},o($V11,[2,41]),o($V91,[2,61],{75:$V61,76:$V71}),o($V91,[2,62],{75:$V61,76:$V71}),o($V81,[2,63]),o($V81,[2,64]),o($Vf,[2,78]),{19:[1,277]},{25:278,91:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq},o($Vf,[2,37]),o($V11,[2,40])];
    defaultActions: {[key:number]: any} = {37:[2,1]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

		return $$[$0-1]
	
break;
case 2:

		$$[$0-1].push($$[$0])
		this.$ = $$[$0-1]
	
break;
case 3:

		this.$ = [$$[$0]]
	
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 21: case 22: case 23: case 32: case 33: case 34: case 35: case 36: case 54: case 66: case 73: case 79: case 80: case 81: case 82: case 83:

		this.$ = $$[$0]
	
break;
case 14:

		this.$ = new Print( $$[$0-1])
	
break;
case 15:

		this.$ = new Declarate($$[$0-1])
	
break;
case 16:

		// DECLARE @id INT DEFAULT 1
		this.$ = new Declarate_def($$[$0-4], $$[$0-3], $$[$0-1])
	
break;
case 17:

		$$[$0-3].push(new var_list($$[$0-1], $$[$0]))
		this.$ = $$[$0-3]
	
break;
case 18:



		this.$ = [new var_list($$[$0-1], $$[$0])]
	
break;
case 19:

		this.$ = new Set($$[$0-3], $$[$0-1])
	
break;
case 20:

		this.$ = new Select($$[$0-1])
	
break;
case 24:

		this.$ = new ddl_Create_Table($$[$0-4], $$[$0-2])
	
break;
case 25:

		this.$ = $$[$0-3]
		$$[$0-3].push([$$[$0-1], $$[$0]])
	
break;
case 26:

		this.$ = []
		this.$.push([$$[$0-1], $$[$0]])
	
break;
case 27:

		this.$ = new ddl_Add($$[$0-4], $$[$0-2], $$[$0-1])
	
break;
case 28:

		this.$ = new ddl_Drop_Column($$[$0-4], $$[$0-1])
	
break;
case 29:

		this.$ = new ddl_Rename_table($$[$0-4], $$[$0-1])
	
break;
case 30:

		this.$ = new ddl_Rename_Column($$[$0-6], $$[$0-3], $$[$0-1])
	
break;
case 31:

		this.$ = new ddl_Drop_Table($$[$0-1])
	
break;
case 37:

		this.$ = new dml_Insert($$[$0-8], $$[$0-6], $$[$0-2])
	
break;
case 38: case 40:

		this.$ = $$[$0-2]
		$$[$0-2].push($$[$0])
	
break;
case 39: case 41:

		this.$ = []
		this.$.push($$[$0])
	
break;
case 42:

		this.$ = new dml_Select($$[$0-3], $$[$0-1])
	
break;
case 43:

		this.$ = new dml_Select("*", $$[$0-1])
	
break;
case 44:

		this.$ = new dml_Select_where($$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 45:

		this.$ = new dml_Select_where("*", $$[$0-3], $$[$0-1])
	
break;
case 46:

		this.$ = new dml_Update($$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 47: case 75:

		this.$ = []
		this.$.push([$$[$0-2], $$[$0]])
	
break;
case 48: case 74:

		this.$ = $$[$0-4]
		$$[$0-4].push([$$[$0-2], $$[$0]])
	
break;
case 49:

		this.$ = new dml_Truncate($$[$0-1])
	
break;
case 50:

		this.$ = new dml_Delete($$[$0-3], $$[$0-1])
	
break;
case 51: case 52: case 53: case 97: case 98:

		this.$ = new Logics($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 55: case 56: case 57: case 58: case 59: case 60: case 91: case 92: case 93: case 94: case 95: case 96:

		this.$ = new Relational($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 61: case 62: case 63: case 64: case 86: case 87: case 88: case 89:

		this.$ = new Aritmertic($$[$0-2], $$[$0-1], $$[$0])
	
break;
case 65: case 90:

		this.$ = new Aritmertic($$[$0], "!", $$[$0])
	
break;
case 67:

		this.$ = new If($$[$0-5], $$[$0-3], null)
	
break;
case 68:

		this.$ = new If($$[$0-7], $$[$0-5], $$[$0-3])
	
break;
case 69:

		this.$ = new Case($$[$0-5], $$[$0-4], $$[$0-2], null)
	
break;
case 70:

		this.$ = new Case($$[$0-6], $$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 71:

		this.$ = new Case(null, $$[$0-4], $$[$0-2], null)
	
break;
case 72:

		this.$ = new Case(null, $$[$0-5], $$[$0-3], $$[$0-1])
	
break;
case 76:

		this.$ = new Statement($$[$0])
	
break;
case 77:

		this.$ = new While($$[$0-4], $$[$0-2])
	
break;
case 78:

		this.$ = new For(new Variable($$[$0-8]), parseInt($$[$0-6]), parseInt($$[$0-4]), $$[$0-2])
	
break;
case 84:

		this.$ = new Group($$[$0-1])
	
break;
case 85:

		this.$ = new Variable($$[$0])
	
break;
case 99:

		this.$ = new Logics($$[$0], $$[$0-1], $$[$0])
	
break;
case 100:

		this.$ = new Primitive( $$[$0], Type_dxnry.INT)
	
break;
case 101:

		this.$ = new Primitive( $$[$0], Type_dxnry.DOUBLE)
	
break;
case 102:

		this.$ = new Primitive( $$[$0], Type_dxnry.DATE)
	
break;
case 103:

		let string_tmp = $$[$0].toString().replace('"','')
		string_tmp = string_tmp.replace('"','')
		this.$ = new Primitive( string_tmp, Type_dxnry.STRING)
	
break;
case 104: case 105:

		this.$ = new Primitive( $$[$0], Type_dxnry.BOOLEAN)
	
break;
case 106:

		this.$ = new Primitive( $$[$0], Type_dxnry.NULL)
	
break;
case 107:

		this.$ = new Cast( $$[$0-3], $$[$0-1])
	
break;
case 108:

		this.$ = Type_dxnry.INT
	
break;
case 109:

		this.$ = Type_dxnry.DOUBLE
	
break;
case 110:

		this.$ = Type_dxnry.DATE
	
break;
case 111:

		this.$ = Type_dxnry.STRING
	
break;
case 112:

		this.$ = Type_dxnry.BOOLEAN
	
break;
case 113:

		console.error('Error sintáctico: ' + yytext + ',  linea: ' + this.$.first_line + ', columna: ' + this.$.first_column)
	
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class QueryParserLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"QueryParser"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\.\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:print\b)/i,/^(?:declare\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:default\b)/i,/^(?:end\b)/i,/^(?:set\b)/i,/^(?:select\b)/i,/^(?:create\b)/i,/^(?:table\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:cast\b)/i,/^(?:as\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:when\b)/i,/^(?:case\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:(@[^@\s,;()]+))/i,/^(?:(\d{4}-\d{2}-\d{2}))/i,/^(?:(\d+\.\d+))/i,/^(?:([0-9]+))/i,/^(?:("([^"\\]|\\.)*"))/i,/^(?:([a-z][a-z0-9_-]*))/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0: return 92
      break;
    case 1: return 36
      break;
    case 2: return 38
      break;
    case 3: return 19
      break;
    case 4: return 26
      break;
    case 5: return 73
      break;
    case 6: return 74
      break;
    case 7: return 75
      break;
    case 8: return 56
      break;
    case 9: return 76
      break;
    case 10: return 72
      break;
    case 11: return 70
      break;
    case 12: return 68
      break;
    case 13: return 28
      break;
    case 14: return 69
      break;
    case 15: return 71
      break;
    case 16: return 63
      break;
    case 17: return 64
      break;
    case 18: return 65
      break;
    case 19: return 100
      break;
    case 20: return 101
      break;
    case 21: return 102
      break;
    case 22: return 17
      break;
    case 23: return 20
      break;
    case 24: return 104
      break;
    case 25: return 105
      break;
    case 26: return 106
      break;
    case 27: return 107
      break;
    case 28: return 108
      break;
    case 29: return 24
      break;
    case 30: return 80
      break;
    case 31: return 27
      break;
    case 32: return 29
      break;
    case 33: return 33
      break;
    case 34: return 34
      break;
    case 35: return 39
      break;
    case 36: return 40
      break;
    case 37: return 41
      break;
    case 38: return 42
      break;
    case 39: return 43
      break;
    case 40: return 44
      break;
    case 41: return 50
      break;
    case 42: return 51
      break;
    case 43: return 53
      break;
    case 44: return 55
      break;
    case 45: return 57
      break;
    case 46: return 59
      break;
    case 47: return 61
      break;
    case 48: return 62
      break;
    case 49: return 103
      break;
    case 50: return 85
      break;
    case 51: return 77
      break;
    case 52: return 78
      break;
    case 53: return 81
      break;
    case 54: return 86
      break;
    case 55: return 82
      break;
    case 56: return 88
      break;
    case 57: return 80
      break;
    case 58: return 87
      break;
    case 59: return 89
      break;
    case 60: return 90
      break;
    case 61: return 22
      break;
    case 62: return 98
      break;
    case 63: return 97
      break;
    case 64: return 91
      break;
    case 65: return 99
      break;
    case 66: return 35
      break;
    case 67:/* Espacios se ignoran */
      break;
    case 68:return 5;
      break;
    case 69: console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
      break;
        }
    }
}

